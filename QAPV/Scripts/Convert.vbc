
' ------------------------------------------------------
' DVTk - The Healthcare Validation Toolkit (www.dvtk.org)
' Copyright © 2010 DVTk
' ------------------------------------------------------
' This file is part of DVTk.
'
' DVTk is free software; you can redistribute it and/or modify it under the terms of the GNU
' Lesser General Public License as published by the Free Software Foundation; either version 3.0
' of the License, or (at your option) any later version. 
' 
' DVTk is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
' the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
' General Public License for more details. 
' 
' You should have received a copy of the GNU Lesser General Public License along with this
' library; if not, see <http://www.gnu.org/licenses/>
#If Not DVT_INTERPRETS_SCRIPT Then
Imports System.Collections.Generic
Imports System.Text

Imports VR = DvtkData.Dimse.VR
Imports DvtkHighLevelInterface.Dicom.Other
#End If

''' <summary>
''' Class containing conversion functionality.
''' </summary>
Friend NotInheritable Class Convert
    Private Sub New()
    End Sub
    ''' <summary>
    ''' Convert the first value of a specified attribute to a String.
    ''' </summary>
    ''' <param name="attributeSet">The Attribute Set containing the DICOM Attribute.</param>
    ''' <param name="tag">The tag of the attribute.</param>
    ''' <returns>
    ''' If the associated DICOM attribute is not present, null is returned.
    ''' If the associated DICOM attribute is present and has no values, "" is returned.
    ''' If the associated DICOM attribute is present and has values, the first value is returned.
    ''' </returns>
    Public Shared Function FirstAttributeValueToString(attributeSet As AttributeSet, tag As [String]) As [String]
        Dim stringForFirstAttributeValue As [String] = Nothing

        Dim attribute As DvtkHighLevelInterface.Dicom.Other.Attribute = attributeSet(tag)

        If attribute.Exists Then
            If attribute.Values.Count = 0 Then
                stringForFirstAttributeValue = ""
            Else
                stringForFirstAttributeValue = Convert.ToTrimmedString(attribute.Values(0), attribute.VR)
            End If
        End If

        Return (stringForFirstAttributeValue)
    End Function

    ''' <summary>
    ''' A null safe string dump, taking care of the case when null is supplied as the first
    ''' argument.
    ''' </summary>
    ''' <param name="stringToDump">A String representing the first value of a DICOM attribute.</param>
    ''' <param name="prefix">Will be added to the beginning of each line.</param>
    ''' <param name="name">The name of the string dump.</param>
    ''' <returns>The string dump.</returns>
    Public Shared Function NullSafeStringDump(stringToDump As [String], prefix As [String], name As [String]) As [String]
        Dim stringDump As [String] = prefix + name

        If stringToDump Is Nothing Then
            stringDump += ": no value (associated DICOM attribute not present)"
        ElseIf stringToDump = "" Then
            stringDump += ": no value (associated DICOM attribute present but contains no values"
        Else
            stringDump += ": """ + stringToDump + """"
        End If

        Return (stringDump)
    End Function

    ''' <summary>
    ''' Removed all non-significant characters, as defined by the specifiedDvtkData.Dimse.VR.
    ''' </summary>
    ''' <param name="stringToTrim">
    ''' The string from which to remove the non-significant characters.
    ''' </param>
    ''' <param name="vr">The VR to take into account.</param>
    ''' <returns>The trimmed String.</returns>
    Public Shared Function ToTrimmedString(stringToTrim As String, vr__1 As DvtkData.Dimse.VR) As String
        Dim trimmedString As String = Nothing

        Select Case vr__1
            Case DvtkData.Dimse.VR.SH, DvtkData.Dimse.VR.LO
                trimmedString = stringToTrim.Trim()
                Exit Select
            Case Else


                ' TODO: still to implement for other VR's.
                trimmedString = stringToTrim
                Exit Select
        End Select

        Return (trimmedString)
    End Function
End Class


