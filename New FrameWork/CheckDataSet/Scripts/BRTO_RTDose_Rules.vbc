Class BRTO_RTDose_Rules

Public Sub New()
End Sub


    Public Shared Function CreateRules() As ArrayList

        Dim iodType As IODType = IODType.RTDose

        ' Create empty list of rules.
        Dim rules As ArrayList = New ArrayList

        ' "Patient" module (DICOM usage: M, IHE-RO usage: M)
        rules.AddRange(CreateIhePatientModuleRules(iodType))

        ' "General Study" module (DICOM usage: M, IHE-RO usage: M)
        rules.AddRange(CreateIheGeneralStudyModuleRules(iodType))

        ' "Frame of Reference" module (DICOM usage: M, IHE-RO usage: M)
        rules.AddRange(CreateIheFrameofReferenceModuleRules(iodType))

        ' "General Equipment" module (DICOM usage: M, IHE-RO usage: M)
        rules.AddRange(CreateIheGeneralEquipmentModuleRules(iodType))

        ' "General Image" module (DICOM usage: C, IHE-RO usage: M)
        rules.AddRange(CreateIheGeneralImageModuleRules(iodType))

        ' "Image Plane" module (DICOM usage: C, IHE-RO usage: R)
        ' Error: unable to determine type 1 or 2 attribute for this module!
        rules.AddRange(CreateIheImagePlaneModuleRules(iodType))

        ' "Multi-Frame" module (DICOM usage: C, IHE-RO usage: R)
        ' Error: unable to determine type 1 or 2 attribute for this module!
        rules.AddRange(CreateIheMultiFrameModuleRules(iodType))

        ' "RT Dose" module (DICOM usage: M, IHE-RO usage: M)
        rules.AddRange(CreateIheRTDoseModuleRules(iodType))

        Return rules

    End Function


    ' Create rules for the Patient Module.
    Private Shared Function CreateIhePatientModuleRules(ByVal iodType As IODType) As ArrayList

        ' Create empty list of rules.
        Dim m_rules As ArrayList = New ArrayList

        ' Rule for attribute "Patient's Name".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x00100010", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Patient ID".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x00100020", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Patient's Birth Date".

        ' Rule for attribute "Patient's Sex".

        Return m_rules

    End Function


    ' Create rules for the General Study Module.
    Private Shared Function CreateIheGeneralStudyModuleRules(ByVal iodType As IODType) As ArrayList

        ' Create empty list of rules.
        Dim m_rules As ArrayList = New ArrayList

        ' Rule for attribute "Study Instance UID".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x0020000D", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Study Date".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x00080020", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Study Time".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x00080030", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Study ID".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x00200010", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Study Description".

        Return m_rules

    End Function


    ' Create rules for the Frame Of Reference Module.
    Private Shared Function CreateIheFrameOfReferenceModuleRules(ByVal iodType As IODType) As ArrayList

        ' Create empty list of rules.
        Dim m_rules As ArrayList = New ArrayList

        ' Rule for attribute "Frame of Reference UID".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x00200052", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Position Reference Indicator".

        Return m_rules

    End Function


    ' Create rules for the General Equipment Module.
    Private Shared Function CreateIheGeneralEquipmentModuleRules(ByVal iodType As IODType) As ArrayList

        ' Create empty list of rules.
        Dim m_rules As ArrayList = New ArrayList

        ' Rule for attribute "Manufacturer".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x00080070", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Manufacturer's Model Name".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x00081090", iodType, ErrorSeverity.RuleError))

        Return m_rules

    End Function


    ' Create rules for the General Image Module.
    Private Shared Function CreateIheGeneralImageModuleRules(ByVal iodType As IODType) As ArrayList

        ' Create empty list of rules.
        Dim m_rules As ArrayList = New ArrayList

        ' Rule for attribute "Acquisition Date".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x00080022", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Acquisition Time".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x00080032", iodType, ErrorSeverity.RuleError))

        Return m_rules

    End Function


    ' Create rules for the Image Plane Module.
    Private Shared Function CreateIheImagePlaneModuleRules(ByVal iodType As IODType) As ArrayList

        ' Create empty list of rules.
        Dim m_rules As ArrayList = New ArrayList

        ' Rule for attribute "Image Orientation (Patient)".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x00200037", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Slice Thickness".

        ' Rule for attribute "Slice Location".

        ' Rule for attribute "Pixel Spacing ".

        Return m_rules

    End Function


    ' Create rules for the Multi-Frame Module.
    Private Shared Function CreateIheMultiFrameModuleRules(ByVal iodType As IODType) As ArrayList

        ' Create empty list of rules.
        Dim m_rules As ArrayList = New ArrayList

        ' Rule for attribute "Frame Increment Pointer".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x00280009", IODType, ErrorSeverity.RuleError))

        Return m_rules

    End Function


    ' Create rules for the RT Dose Module.
    Private Shared Function CreateIheRTDoseModuleRules(ByVal iodType As IODType) As ArrayList

        ' Create empty list of rules.
        Dim m_rules As ArrayList = New ArrayList

        ' Rule for attribute "Samples per Pixel".
        m_rules.Add(New AttributeValueRule("0x00280002", "1", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Photometric Interpretation".
        m_rules.Add(New AttributeValueRule("0x00280004", "monochrome2", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Bits Allocated".
        m_rules.Add(New AttributeValueListRule("0x00280100", New String() {"16", "32"}, iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Bits Stored".
        m_rules.Add(New AttributeValueListRule("0x00280101", New String() {"16", "32"}, iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "High Bit".
        m_rules.Add(New AttributeValueListRule("0x00280102", New String() {"15", "31"}, iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Pixel Representation".
        m_rules.Add(New AttributeValueRule("0x00280103", "0", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Dose Units".
        m_rules.Add(New AttributeValueRule("0x30040002", "gy", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Dose Type".
        m_rules.Add(New AttributeValueRule("0x30040004", "physical", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Dose Comment".

        ' Rule for attribute "Normalization Point".

        ' Rule for attribute "Dose Summation Type".
        m_rules.Add(New AttributeValueRule("0x3004000A", "plan", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Referenced RT Plan Sequence".
        m_rules.Add(New AttributeIsRequiredRule("0x300C0002", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Grid Frame Offset Vector".
        m_rules.Add(New AttributeIsRequiredHasValueRule("0x300C0002/0x3004000C", iodType, ErrorSeverity.RuleError))

        ' Rule for attribute "Tissue Heterogeneity Correction".

        Return m_rules

    End Function


End Class
