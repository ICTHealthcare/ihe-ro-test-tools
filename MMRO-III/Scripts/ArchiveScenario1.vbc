Class ArchiveScenario1
    Inherits Scenario
    'Different steps in this scenario:
    '- store the reference dataset
    '- recieve the reference dataset
    '- compare the reference with the revieved dataset

    Private sendRefDataSet As SendScenarioStep = Nothing
    Private recieveDataSet As ReceiveScenarioStep = Nothing
    Private validate As ValidateScenarioStep = Nothing
    Private cleanUp As CleanUpScenarioStep = Nothing
    Public archiveActor As ArchiveActor = Nothing

    Public Sub New()

        archiveActor = New ArchiveActor
        sendRefDataSet = New SendScenarioStep


        'set the XML configuration file
        m_scenarioDatasetXmlFileName = "TransparencyReferenceDataSet.xml"

        'configure the send scenario step
        sendRefDataSet.AddActor(archiveActor)

        Dim DefOrCustomDatasetDialog As DefaultOrCustomDatasetDialog = New DefaultOrCustomDatasetDialog()
        Dim chozenFolder As String = ""
        DefOrCustomDatasetDialog.lbCustomDatasets.DataSource = ReferenceDataSet.GetInstance().GetCustomDatasetNames()

        DefOrCustomDatasetDialog.ShowDialog()

        If DefOrCustomDatasetDialog.Custom Then
            chozenFolder = DefOrCustomDatasetDialog.lbCustomDatasets.SelectedItem.ToString()
            m_scenarioDatasetXmlFileName = chozenFolder + ".xml"
        End If

        Dim XMLFilePath As String = TestToolConfiguration.GetInstance.GetScriptPath

        ReferenceDataSet.GetInstance().LoadNewDataSet(XMLFilePath + m_scenarioDatasetXmlFileName)

        Dim FOR1DICOMmessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = ReferenceDataSet.GetInstance().GetCTImage(1, 1)
        Dim FOR1IODType As String = ""
        If (FOR1DICOMmessage.DataSet.Exists(Tags.SOPClassUID)) Then
            If (FOR1DICOMmessage.DataSet(Tags.SOPClassUID).Values(0) = SOPclass.CTImageSOPClassUID) Then
                FOR1IODType = "CT"
                sendRefDataSet.AddTransaction(New RAD_8_Transaction(IODType.CTImage))
            ElseIf (FOR1DICOMmessage.DataSet(Tags.SOPClassUID).Values(0) = SOPclass.MRImageSOPClassUID) Then
                FOR1IODType = "MR"
                sendRefDataSet.AddTransaction(New RAD_8_Transaction(IODType.MRImage))
            ElseIf (FOR1DICOMmessage.DataSet(Tags.SOPClassUID).Values(0) = SOPclass.PetImageSOPClassUID) Then
                FOR1IODType = "PET"
                sendRefDataSet.AddTransaction(New RAD_8_Transaction(IODType.PETImage))

            End If
        End If

        Dim FOR2DICOMmessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = ReferenceDataSet.GetInstance().GetMRImage(1, 1)
        Dim FOR2IODType As String = ""
        If (FOR2DICOMmessage.DataSet.Exists(Tags.SOPClassUID)) Then
            If (FOR2DICOMmessage.DataSet(Tags.SOPClassUID).Values(0) = SOPclass.CTImageSOPClassUID) Then
                FOR2IODType = "CT"
                sendRefDataSet.AddTransaction(New RAD_8_Transaction(IODType.CTImage))
            ElseIf (FOR2DICOMmessage.DataSet(Tags.SOPClassUID).Values(0) = SOPclass.MRImageSOPClassUID) Then
                FOR2IODType = "MR"
                sendRefDataSet.AddTransaction(New RAD_8_Transaction(IODType.MRImage))
            ElseIf (FOR2DICOMmessage.DataSet(Tags.SOPClassUID).Values(0) = SOPclass.PetImageSOPClassUID) Then
                FOR2IODType = "PET"
                sendRefDataSet.AddTransaction(New RAD_8_Transaction(IODType.PETImage))
            End If
        End If

        Dim bla As Integer = ReferenceDataSet.GetInstance().GetImageCount(1, IODType.CTImage)
        Dim bla2 As Integer = ReferenceDataSet.GetInstance().GetImageCount(1, IODType.PETImage)

        Dim FOR3DICOMmessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = ReferenceDataSet.GetInstance().GetPETImage(1, 1)
        Dim FOR3IODType As String = ""
        If (FOR3DICOMmessage.DataSet.Exists(Tags.SOPClassUID)) Then
            If (FOR3DICOMmessage.DataSet(Tags.SOPClassUID).Values(0) = SOPclass.CTImageSOPClassUID) Then
                FOR3IODType = "CT"
                sendRefDataSet.AddTransaction(New RAD_8_Transaction(IODType.CTImage))
            ElseIf (FOR3DICOMmessage.DataSet(Tags.SOPClassUID).Values(0) = SOPclass.MRImageSOPClassUID) Then
                FOR3IODType = "MR"
                sendRefDataSet.AddTransaction(New RAD_8_Transaction(IODType.MRImage))
            ElseIf (FOR3DICOMmessage.DataSet(Tags.SOPClassUID).Values(0) = SOPclass.PetImageSOPClassUID) Then
                FOR3IODType = "PET"
                sendRefDataSet.AddTransaction(New RAD_8_Transaction(IODType.PETImage))
            End If
        End If

        sendRefDataSet.AddTransaction(New RO_5_Transaction())
        sendRefDataSet.AddTransaction(New MMRO_3_Transaction())

        'MMRO III
        sendRefDataSet.AddTransaction(New MMRO_III_1_Transaction())

        recieveDataSet = New ReceiveScenarioStep(FOR1IODType, FOR2IODType)
        validate = New ValidateScenarioStep(recieveDataSet, True)
        cleanUp = New CleanUpScenarioStep(TestToolConfiguration.GetInstance.GetSession.ResultsRootDirectory)


        'configure the recieve scenario step
        recieveDataSet.AddActor(archiveActor)

        If (FOR1IODType = "CT" Or FOR2IODType = "CT") Then
            recieveDataSet.AddTransaction(New RAD_8_Transaction(IODType.CTImage))
        ElseIf (FOR1IODType = "MR" Or FOR2IODType = "MR") Then
            recieveDataSet.AddTransaction(New RAD_8_Transaction(IODType.MRImage))
        ElseIf (FOR1IODType = "PET" Or FOR2IODType = "PET") Then
            recieveDataSet.AddTransaction(New RAD_8_Transaction(IODType.PETImage))
        End If

        recieveDataSet.AddTransaction(New MMRO_5_Transaction)
        recieveDataSet.AddTransaction(New MMRO_4_Transaction)

        'MMRO III
        recieveDataSet.AddTransaction(New MMRO_III_2_Transaction)

        'configure the compare scenario step
        validate.AddRule(New CompareRule(IODType.CTImage, ErrorSeverity.RuleError))
        validate.AddRule(New CompareRule(IODType.MRImage, ErrorSeverity.RuleError))
        validate.AddRule(New CompareRule(IODType.PETImage, ErrorSeverity.RuleError))
        validate.AddRule(New CompareRule(IODType.RTDose, ErrorSeverity.RuleError))
        validate.AddRule(New CompareRule(IODType.RTStructureSet, ErrorSeverity.RuleError))
        validate.AddRule(New CompareRule(IODType.SpatialRegistration, ErrorSeverity.RuleError))

        'Add the scenario steps in the correct order
        m_scenarioSteps.Add(sendRefDataSet)
        m_scenarioSteps.Add(recieveDataSet)
        m_scenarioSteps.Add(validate)

        If TestToolConfiguration.GetInstance.DoCleanUp = True Then
            m_scenarioSteps.Add(cleanUp)
        End If
    End Sub
End Class
