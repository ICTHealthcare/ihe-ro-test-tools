'Receiver

'Receives transactions from the actor under test
'This class : 
' - Listens for incoming associations
' - Handles incoming associations correctly
' - Stops when one or more stopcriteria are met.
' Stopcriteria for the receiver are: 
' * AllExpectedObjectsReceived
' * UserPressedStop
'( * ReceiveTimeout occurred)

Class Receiver

    'Constructor
    Public Sub New()
    End Sub

    Public Sub New(ByVal FOR1IODType As String, ByVal FOR2IODType As String)
        m_FOR1IODType = FOR1IODType
        m_FOR2IODType = FOR2IODType
    End Sub

    Private m_FOR1IODType As String
    Private m_FOR2IODType As String
    'constants
    Protected Const SOPClassUIDTagSequence As String = "0x00080016"
    Protected Const RTDose As String = "1.2.840.10008.5.1.4.1.1.481.2"
    Protected Const RTStructerSet As String = "1.2.840.10008.5.1.4.1.1.481.3"
    Protected Const CTImage As String = "1.2.840.10008.5.1.4.1.1.2"
    Protected Const MRImage As String = "1.2.840.10008.5.1.4.1.1.4"
    Protected Const PETImage As String = "1.2.840.10008.5.1.4.1.1.128"
    Protected Const SpatialRegistration As String = "1.2.840.10008.5.1.4.1.1.66.1"

    Private m_recievedMessages As DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection = New DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection
    Private m_errorMessage As String = "The received transactions do not match the expected transactions" + Environment.NewLine + "The transactions decribed below were not recieved:"

    'has transactions to receive
    Protected m_transactions As ArrayList = Nothing
    'has a m_receiverThread
    Public m_receiverThread As ReceiverThread = New ReceiverThread("DVTk_Receiver")
    'has a logging mechanisme
    Protected m_logger As Logger = Logger.GetInstance()
    'has received messages
    Public ReadOnly Property ReceivedMessages() As DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection
        Get
            Try
                If m_recievedMessages.Count = 0 Then
                    m_recievedMessages = m_receiverThread.Messages.DicomMessages.CStoreRequests
                    m_receiverThread.ClearMessages()
                End If
                Return m_recievedMessages
            Catch ex As System.NullReferenceException
                Return New DvtkHighLevelInterface.Dicom.Messages.DicomMessageCollection
            End Try
        End Get
    End Property
    'returns the missing transactions for the exeption
    Public ReadOnly Property MissingTransactions() As String
        Get
            Return m_errorMessage
        End Get
    End Property
    'Receive Transactionsfrom the actor under test
    ' - Listens for incoming associations
    ' - Handles incoming associations correctly
    ' - Stops when one or more stopcriteria are met.
    Public Function ReceiveTransactions(ByRef transactions As ArrayList) As Boolean
        'Dim config As TestToolConfiguration = TestToolConfiguration.GetInstance()

        'm_receiverThread.Initialize(config.GetMainThread())
        ' m_receiverThread.Options.CopyFrom(config.GetMainThread().Options)
        m_receiverThread.Options.Identifier = "IHE-RO Tool Receiver"
        'm_receiverThread.Options.LogThreadStartingAndStoppingInParent = False
        'm_receiverThread.Options.StartAndStopResultsGatheringEnabled = True
        m_receiverThread.Options.AutoValidate = False
        'm_receiverThread.ResultsGatheringStarted = False
        '     Add the different MessageHandlers.
        m_receiverThread.AddToBack(New MessageHandlerCStore)
        m_receiverThread.AddToBack(New MessageHandlerAssociateRQ)

#If DVT_INTERPRETS_SCRIPT Then
		Dim theHliForm As New HliForm
        theHliForm.Attach(m_receiverThread)
#Else
        DvtkHighLevelInterface.Common.UserInterfaces.HliForm.GetSingleton().Attach(m_receiverThread)
        DvtkHighLevelInterface.Common.UserInterfaces.HliForm.GetSingleton().AutoExit = True
#End If

        ' Log all allowed transfersyntaxes
        LogUsedTransferSyntaxes()
        ' Start the SCP listener
        m_receiverThread.Start()

        'show the listening dialog
        Dim TheForm As Form = New ListeningDlg
        Dim theDialogResult As Integer = TheForm.ShowDialog()

        ' Stop Listening
        m_receiverThread.Stop()
        m_receiverThread.WaitForCompletion()
        If m_receiverThread.HasExceptionOccured Then
            Throw New System.Exception("An error occured while receiving transactions from the actor under test")
        End If

        If m_receiverThread.m_inAssociation Then
            Throw New System.Exception("An abort occured while receiving transactions from the actor under test")
            'MessageBox.Show("Receiver in association.")
        End If

        m_logger.LogMessage("Number of dicom (cstore-rq) messages received: " + ReceivedMessages.Count.ToString())

    End Function

    'Check if all transactions are received.
    Public Function AllTransactionsReceived(ByRef expectedTransactions As ArrayList) As Boolean
        Dim resultString As String = ""
        Dim m_allTransactionsRecieved As Boolean = True

        For Each transaction As Transaction In expectedTransactions
            If Not TransactionReceived(transaction.m_iodtype) Then
                m_allTransactionsRecieved = False
            ElseIf transaction.m_iodtype = IODType.SpatialRegistration Then
                If Not CorrectSpatialRegistrationReceived() Then
                    m_allTransactionsRecieved = False
                End If
            End If
        Next
        Return m_allTransactionsRecieved
    End Function

    'Check if the received message has the transaction IOD type.
    Protected Function TransactionReceived(ByRef searchIodType As IODType) As Boolean
        Dim expectedSOPClassUID As String
        Dim messageSOPClassUID As String
        Dim typeOfImage As String
        Dim attribute As DvtkHighLevelInterface.Dicom.Other.Attribute

        Select Case searchIodType
            Case IODType.CTImage
                expectedSOPClassUID = CTImage
                typeOfImage = "CT"
            Case IODType.RTDose
                expectedSOPClassUID = RTDose
                typeOfImage = "RT DOSE"
            Case IODType.RTStructureSet
                expectedSOPClassUID = RTStructerSet
                typeOfImage = "RT Structureset"
            Case IODType.MRImage
                expectedSOPClassUID = MRImage
                typeOfImage = "MR"
            Case IODType.PETImage
                expectedSOPClassUID = PETImage
                typeOfImage = "PET"
            Case IODType.SpatialRegistration
                typeOfImage = " spatial registration"
                expectedSOPClassUID = SpatialRegistration
                'Not needed for IHE RO 2008
                'Case IODType.RTPlanDosimetric
                '    expectedSOPClassUID = RTPlan
                'Case IODType.RTPlanGeometric
                '    expectedSOPClassUID = RTPlan
        End Select

        For Each message As DvtkHighLevelInterface.Dicom.Messages.DicomMessage In ReceivedMessages
            attribute = message.DataSet(SOPClassUIDTagSequence)
            messageSOPClassUID = attribute.Values(0)
            If expectedSOPClassUID = messageSOPClassUID Then
                Return True
            End If
        Next

        If expectedSOPClassUID = SpatialRegistration Then
            Dim nrOfRegistrations = 1
            If nrOfRegistrations = 1 Then
                m_errorMessage = String.Concat(Me.m_errorMessage, Environment.NewLine + "The " + typeOfImage + " transaction was not recieved, expected number of spatial registrations: 1")
            Else
                Me.m_errorMessage = String.Concat(Me.m_errorMessage, Environment.NewLine + "The " + typeOfImage + " transaction was not recieved, at least one spatial registration should be recieved")
            End If
        Else
            Me.m_errorMessage = String.Concat(Me.m_errorMessage, Environment.NewLine + "The " + typeOfImage + " transaction was not recieved")
        End If

        Return False

    End Function

    Protected Sub LogUsedTransferSyntaxes()
        Dim message As String
        message = "Supported Transfer Syntaxes for receiver:"

        For Each stringvalue As String In TestToolConfiguration.GetInstance().SupportedTransferSyntaxesReceiver
            message += vbCrLf + vbTab + stringvalue
        Next
        Logger.GetInstance().LogMessage(message)
    End Sub

    Private Function CorrectSpatialRegistrationReceived()
        Dim MessageArray() As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = Nothing
        Dim temp As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = Nothing
        Dim i As Integer = 0
        Dim attribute As DvtkHighLevelInterface.Dicom.Other.Attribute
        Dim messageSOPClassUID As String
        Dim referenceData As ReferenceDataSet = ReferenceDataSet.GetInstance()
        Dim pass As Boolean = True

        For Each message As DvtkHighLevelInterface.Dicom.Messages.DicomMessage In ReceivedMessages
            attribute = message.DataSet(SOPClassUIDTagSequence)
            messageSOPClassUID = attribute.Values(0)
            If messageSOPClassUID = SpatialRegistration Then
                ReDim Preserve MessageArray(i)
                MessageArray(i) = message
                i += 1
            End If
        Next

        Dim length As Integer = MessageArray.GetLength(0)
        For i = 0 To length - 1

            If Not MessageArray(i).DataSet.Exists("0x00700308[2]/0x00200052") Then
                m_errorMessage = String.Concat(Me.m_errorMessage, Environment.NewLine + "An incorrect spatial registration object was recieved, 0x00700308[2]/0x00200052 does not exsist")
                pass = False
                Exit For
            End If

            Select Case m_FOR2IODType
                Case "PET"
                    If Not MessageArray(i).DataSet.GetValues("0x00700308[2]/0x00200052").Item(0).Equals(referenceData.GetSliceImage(1, 1, IODType.PETImage).DataSet.GetValues("0x00200052").Item(0)) Then
                        m_errorMessage = String.Concat(Me.m_errorMessage, Environment.NewLine + "An incorrect spatial registration object was recieved, expected spatial registration based on FOR of PET")
                        pass = False
                        Exit For
                    End If
                Case "MR"
                    If Not MessageArray(i).DataSet.GetValues("0x00700308[2]/0x00200052").Item(0).Equals(referenceData.GetSliceImage(1, 1, IODType.MRImage).DataSet.GetValues("0x00200052").Item(0)) Then
                        m_errorMessage = String.Concat(Me.m_errorMessage, Environment.NewLine + "An incorrect spatial registration object was recieved, expected spatial registration based on FOR of MR")
                        pass = False
                        Exit For
                    End If

                Case "CT"
                    If Not MessageArray(i).DataSet.GetValues("0x00700308[2]/0x00200052").Item(0).Equals(referenceData.GetSliceImage(1, 1, IODType.CTImage).DataSet.GetValues("0x00200052").Item(0)) Then
                        m_errorMessage = String.Concat(Me.m_errorMessage, Environment.NewLine + "An incorrect spatial registration object was recieved, expected spatial registration based on FOR of CT")
                        pass = False
                        Exit For
                    End If
            End Select
        Next
        Return pass
    End Function

End Class