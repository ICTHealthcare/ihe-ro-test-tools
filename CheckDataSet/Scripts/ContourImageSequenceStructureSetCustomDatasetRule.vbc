Class ContourImageSequenceStructureSetCustomDatasetRule
    Inherits MessageCollectionRule


    Public Sub New(ByVal iodType As IODType, ByVal severity As ErrorSeverity, ByVal folderName As String, ByVal expectedRTStructFileName As String)

        MyBase.New("Contour Image Sequence Structure Set Rule", iodType, severity)
        m_folderName = folderName
        m_expectedRTStructFileName = expectedRTStructFileName
    End Sub

    Private m_ctSet As CTSet
    Private m_message As String
    Private m_valid As Boolean = False
    Private m_messageCollectionHelper As messageCollectionHelper
    Private m_folderName As String
    Private m_expectedRTStructFileName As String

    Public Overrides Sub ApplyRule(ByRef fileCollection() As DvtkHighLevelInterface.Dicom.Files.DicomFile)
        m_messageCollectionHelper = New messageCollectionHelper(fileCollection)

        Dim structureSetDataSet As DvtkHighLevelInterface.Dicom.Other.DataSet = Nothing
        Dim ctImage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = Nothing
        Dim done As Boolean = False

        Dim seqItem As DvtkHighLevelInterface.Dicom.Other.SequenceItem = Nothing
        Dim referencedFrameofReferenceSequenceAttribute As DvtkHighLevelInterface.Dicom.Other.Attribute = Nothing
        Dim rtReferencedStudySequenceAttribute As DvtkHighLevelInterface.Dicom.Other.Attribute = Nothing
        Dim rtReferencedSeriesSequenceAttribute As DvtkHighLevelInterface.Dicom.Other.Attribute = Nothing
        Dim contourImageSequenceAttribute As DvtkHighLevelInterface.Dicom.Other.Attribute = Nothing


        If m_expectedRTStructFileName Is Nothing Then
            m_valid = False
            m_message = "No RT Structure Set received"
        Else
            Dim dicomFile As DvtkHighLevelInterface.Dicom.Files.DicomFile = New DvtkHighLevelInterface.Dicom.Files.DicomFile()
            dicomFile.Read(m_expectedRTStructFileName)
            structureSetDataSet = dicomFile.DataSet

            If structureSetDataSet.Exists(Tags.ReferencedFrameofReferenceSequence) = False Then
                m_valid = False
                done = True
                m_message = "The attribute: '" + Tags.GetTagName(Tags.ReferencedFrameofReferenceSequence) + "' (" + Tags.ReferencedFrameofReferenceSequence + ")is not present"
            Else
                'Get Referenced Frame of ReferenceSequence (0x30060010)
                referencedFrameofReferenceSequenceAttribute = structureSetDataSet(Tags.ReferencedFrameofReferenceSequence)

                Dim i As Integer
                If done = False Then
                    For i = 1 To referencedFrameofReferenceSequenceAttribute.ItemCount()
                        If done = False Then
                            seqItem = referencedFrameofReferenceSequenceAttribute.GetItem(i)
                            'RT Referenced Study Sequence (0x30060012), check if exsists
                            If seqItem.Exists(Tags.RtReferencedStudySequenceTag) = False Then
                                m_valid = False
                                done = True
                                m_message = "The attribute: '" + Tags.GetTagName(Tags.RtReferencedStudySequenceTag) + "' (" + Tags.RtReferencedStudySequenceTag + ") is not present"
                            Else
                                'RT Referenced Study Sequence (0x30060012)
                                rtReferencedStudySequenceAttribute = seqItem(Tags.RtReferencedStudySequenceTag)
                                Dim j As Integer
                                For j = 1 To rtReferencedStudySequenceAttribute.ItemCount()
                                    If done = False Then
                                        seqItem = rtReferencedStudySequenceAttribute.GetItem(j)
                                        'RT Referenced Series Sequence (0x30060014), check if exists
                                        If seqItem.Exists(Tags.RtReferencedSeriesSequenceTag) = False Then
                                            m_valid = False
                                            done = True
                                            m_message = "The attribute: '" + Tags.GetTagName(Tags.RtReferencedSeriesSequenceTag) + "' (" + Tags.RtReferencedSeriesSequenceTag + ") is not Present"
                                        Else
                                            'RT Referenced Series Sequence (0x30060014)
                                            rtReferencedSeriesSequenceAttribute = seqItem(Tags.RtReferencedSeriesSequenceTag)
                                            Dim k As Integer
                                            For k = 1 To rtReferencedSeriesSequenceAttribute.ItemCount()
                                                If done = False Then
                                                    seqItem = rtReferencedSeriesSequenceAttribute.GetItem(k)
                                                    'Contour Image Sequence Attribute 0x30060016
                                                    If seqItem.Exists(Tags.ContourImageSequenceTag) Then
                                                        contourImageSequenceAttribute = seqItem(Tags.ContourImageSequenceTag)

                                                        Dim contourImageSequenceSeqItem As DvtkHighLevelInterface.Dicom.Other.SequenceItem = Nothing
                                                        contourImageSequenceSeqItem = contourImageSequenceAttribute.GetItem(1)
                                                        Dim contourImageSequenceSOPClassUID As String = contourImageSequenceSeqItem(Tags.ReferencedSOPClassUID).Values(0).ToString()


                                                        'Must contain an item for every ct image according to IHE-RO
                                                        Dim numberOfImages As Integer

                                                        If (contourImageSequenceSOPClassUID = SOPclass.CTImageSOPClassUID) Then
                                                            numberOfImages = ReferenceDataSet.GetInstance.GetCustomDatasetCStoreMessages(m_folderName, IODType.CTImage).Count
                                                        ElseIf (contourImageSequenceSOPClassUID = SOPclass.MRImageSOPClassUID) Then
                                                            numberOfImages = ReferenceDataSet.GetInstance.GetCustomDatasetCStoreMessages(m_folderName, IODType.MRImage).Count

                                                        ElseIf (contourImageSequenceSOPClassUID = SOPclass.PetImageSOPClassUID) Then
                                                            numberOfImages = ReferenceDataSet.GetInstance.GetCustomDatasetCStoreMessages(m_folderName, IODType.PETImage).Count
                                                        End If

                                                        If contourImageSequenceAttribute.ItemCount <= numberOfImages Then
                                                            m_valid = True
                                                            done = True
                                                            m_message = "'" + Tags.GetTagName(Tags.ContourImageSequenceTag) + "' (" + Tags.ContourImageSequenceTag + ") has a correct number of referenced images"
                                                        Else
                                                            m_valid = False
                                                            done = True
                                                            m_message = "'" + Tags.GetTagName(Tags.ContourImageSequenceTag) + "' (" + Tags.ContourImageSequenceTag + ") has to many references, reference to " + contourImageSequenceAttribute.ItemCount.ToString() + " images, maxiumum " + numberOfImages.ToString() + " images can be referenced"
                                                        End If
                                                    End If
                                                End If
                                            Next
                                        End If
                                    End If
                                Next
                            End If
                        End If
                    Next
                End If
            End If
        End If

        If m_valid = True Then
            Me.SetValid(m_message)
        Else
            Me.SetError(m_message)
        End If

        Me.Report()
    End Sub
End Class