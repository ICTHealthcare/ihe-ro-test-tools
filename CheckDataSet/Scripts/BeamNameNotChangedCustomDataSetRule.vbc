Class BeamNameNotChangedCustomDataSetRule
    Inherits AttributeRule

    Public Sub New(ByVal iodType As IODType, ByVal severity As ErrorSeverity, ByVal customFolder As String)

        MyBase.New("Beam Name Not Changed Rule", "", iodType, severity)
        m_customFolder = customFolder
    End Sub

    Private m_customFolder As String

    Public Overrides Sub ApplyRule(ByRef dicomFile As DvtkHighLevelInterface.Dicom.Files.DicomFile, ByVal iodType As IODType)

        Dim beamNameAttribute As DvtkHighLevelInterface.Dicom.Other.Attribute = Nothing
        Dim beamSequenceAttribute As DvtkHighLevelInterface.Dicom.Other.Attribute = Nothing
        Dim beamSequenceRefDataAttribute As DvtkHighLevelInterface.Dicom.Other.Attribute = Nothing

        Dim refDataSet As DvtkHighLevelInterface.Dicom.Other.DataSet


        If (iodType = Me.IODTypeRule And (iodType = iodType.RTPlanDosimetric Or iodType = iodType.RTPlanGeometric)) Then
            Dim attribute As DvtkHighLevelInterface.Dicom.Other.Attribute = Nothing
            Dim message As String
            Dim done As Boolean = False

            If dicomFile.DataSet.Exists(Tags.BeamSequence) = False Then
                message = "The attribute: '" + Tags.GetTagName(Tags.BeamSequence) + "' (" + Tags.BeamSequence + ") is not present."
                Me.SetError(message)
                done = True
            Else
                beamSequenceAttribute = dicomFile.DataSet(Tags.BeamSequence)
            End If

            If done = False Then
                If iodType = iodType.RTPlanDosimetric Then
                    refDataSet = ReferenceDataSet.GetInstance().GetCustomDatasetCStoreMessages(m_customFolder, iodType.RTPlanDosimetric)(0).DataSet
                Else
                    refDataSet = ReferenceDataSet.GetInstance().GetCustomDatasetCStoreMessages(m_customFolder, iodType.RTPlanGeometric)(0).DataSet
                End If

                'Check if Beam Sequence exists, the beam sequence should be present.
                If refDataSet.Exists(Tags.BeamSequence) = False Then
                    message = "The attribute: '" + Tags.GetTagName(Tags.BeamSequence) + "' (" + Tags.BeamSequence + ") is not present in ReferenceData."
                    Me.SetError(message)
                    done = True
                End If

                'Check if name has changed for a certain beam (number)
                If done = False Then
                    beamSequenceRefDataAttribute = refDataSet(Tags.BeamSequence)
                    Dim beamRefCounter As Integer
                    For beamRefCounter = 1 To beamSequenceRefDataAttribute.ItemCount()
                        If done = False Then
                            Dim beamCounter As Integer
                            For beamCounter = 1 To beamSequenceAttribute.ItemCount()
                                If Not beamSequenceRefDataAttribute.GetItem(beamRefCounter)(Tags.BeamNameTagSequence).Values(0).Equals(beamSequenceAttribute.GetItem(beamCounter)(Tags.BeamNameTagSequence).Values(0)) And beamSequenceRefDataAttribute.GetItem(beamRefCounter)(Tags.BeamNumber2).Values(0).Equals(beamSequenceAttribute.GetItem(beamCounter)(Tags.BeamNumber2).Values(0)) And done = False Then
                                    'If changed then we can stop and set the error
                                    message = "'" + Tags.GetTagName(Tags.BeamNameTagSequence) + "' (" + Tags.BeamNameTagSequence + ") of beam with beam number " + beamSequenceAttribute.GetItem(beamCounter)(Tags.BeamNumber2).Values(0).ToString() + " has changed"
                                    Me.SetError(message)
                                    done = True
                                End If
                            Next
                        End If
                    Next
                End If
            End If

            If done = False Then
                'If beam name has not changed, then set to valid
                message = "'" + Tags.GetTagName(Tags.BeamNameTagSequence) + "' (" + Tags.BeamNameTagSequence + ") values have not changed"
                Me.SetValid(message)
            End If
            'Reporter, write to results, if there is anything to report
            Me.Report()
        End If
    End Sub
End Class
