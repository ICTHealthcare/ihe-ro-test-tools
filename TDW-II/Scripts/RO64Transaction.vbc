#If Not DVT_INTERPRETS_SCRIPT Then
Imports System.Collections.Generic
#End If

Class RO64Transaction
    Inherits Transaction

    Private ro64IODType As IODType = Nothing
    Private m_isRadiationDelivered As Boolean
    Private m_isCancelled As Boolean
    Private m_progress As Integer
    Private m_RTRecordSopClassUID As String
    'Constructor
    Public Sub New(ByVal isRadiationDelivered As Boolean, ByVal isCancelled As Boolean, ByVal RTRecordSopClassUID As String)

        MyBase.New("RO-64", "Treatment Delivery Final Update", IODType.UnifiedProcedureStepPush, True)
        ro64IODType = IODType.UnifiedProcedureStepPush
        m_isRadiationDelivered = isRadiationDelivered
        m_isCancelled = isCancelled
        m_progress = -1
        m_RTRecordSopClassUID = RTRecordSopClassUID
    End Sub


    Private Sub CopyInterOperabilityAttributes(ByVal message As DicomMessage)
        ' Fill  (0x00001001)  Requested SOP Instance UID
        message.CommandSet.Set(Tags.RequestedSOPInstanceUID, UI, DataSetHandler.GetAttributeValueFromDataSet(DataSetHandler.UPSCacheXMLFileName, createCFindRespString(), Tags.SOPInstanceUID))

        ' Fill  (0x00081195)  Transaction UID
        message.DataSet.Set(Tags.TransactionUID, UI, DataSetHandler.GetAttributeValueFromDataSet(DataSetHandler.UPSCacheXMLFileName, createNActionReqString(), Tags.TransactionUID))

        ' Fill > (0x00404028)  Performed Station Name Code Sequence
        If DataSetHandler.AttributeExistsInDataSet(DataSetHandler.UPSCacheXMLFileName, createCFindRespString(), Tags.ScheduledStationNameCodeSequence) Then
            ' Fill >> (0x00080100)  Code Value
            message.DataSet.Set(Tags.UPSPerformedProcedurePerformedStationNameCodeCodeValue, SH, DataSetHandler.GetAttributeValueFromDataSet(DataSetHandler.UPSCacheXMLFileName, createCFindRespString(), Tags.ScheduledStationCodeValue))
            ' Fill >> (0x00080102)  Coding Scheme Designator
            message.DataSet.Set(Tags.UPSPerformedProcedurePerformedStationNameCodeCodingSchemeDesignator, SH, DataSetHandler.GetAttributeValueFromDataSet(DataSetHandler.UPSCacheXMLFileName, createCFindRespString(), Tags.ScheduledStationCodingSchemeDesignator))
            ' Fill >> (0x00080104)  Code Meaning
            message.DataSet.Set(Tags.UPSPerformedProcedurePerformedStationNameCodeCodeMeaning, LO, DataSetHandler.GetAttributeValueFromDataSet(DataSetHandler.UPSCacheXMLFileName, createCFindRespString(), Tags.ScheduledStationCodeMeaning))
        End If

        ' Fill > (0x00404019)  Performed Workitem Code Sequence
        If DataSetHandler.AttributeExistsInDataSet(DataSetHandler.UPSCacheXMLFileName, createCFindRespString(), Tags.ScheduledWorkitemCodeSequence) Then
            ' Fill >> (0x00080100)  Code Value
            message.DataSet.Set(Tags.UPSPerformedProcedurePerformedWorkitemCodeCodeValue, SH, DataSetHandler.GetAttributeValueFromDataSet(DataSetHandler.UPSCacheXMLFileName, createCFindRespString(), Tags.ScheduledWorkitemCodeValue))
            ' Fill >> (0x00080102)  Coding Scheme Designator
            message.DataSet.Set(Tags.UPSPerformedProcedurePerformedWorkitemCodeCodingSchemeDesignator, SH, DataSetHandler.GetAttributeValueFromDataSet(DataSetHandler.UPSCacheXMLFileName, createCFindRespString(), Tags.ScheduledWorkitemCodingSchemeDesignator))
            ' Fill >> (0x00080104)  Code Meaning
            message.DataSet.Set(Tags.UPSPerformedProcedurePerformedWorkitemCodeCodeMeaning, LO, DataSetHandler.GetAttributeValueFromDataSet(DataSetHandler.UPSCacheXMLFileName, createCFindRespString(), Tags.ScheduledWorkitemCodeMeaning))
        End If

        ' Fill > (0x00404033)  Output Information Sequence
        If DataSetHandler.AttributeExistsInDataSet(DataSetHandler.UPSCacheXMLFileName, createCFindRespString(), Tags.ScheduledWorkitemCodeSequence) Then
            ' Fill >> (0x0040E021)  Type of Instances
            message.DataSet.Set(Tags.UPSPerformedProcedureOutputInformationSequenceTypeOfInstances, CS, "DICOM")

            Dim datasetPath As String = DataSetHandler.GetDataPath(DataSetHandler.UPSDataXMLFileName)
            Dim RTRecordDataSet As Dicom.Other.DataSet = DataSetHandler.LoadDatasetFromFolderByClassUid(datasetPath, SOPclass.RTBeamsTreatmentRecordSTOREOPClassUID)

            Dim StudyInstanceUID As String = RTRecordDataSet(Tags.StudyInstanceUID).Values(0)
            Dim SerieInstanceUID As String = RTRecordDataSet(Tags.SeriesInstanceUID).Values(0)
            Dim ReferencedSOPClassUID As String = RTRecordDataSet(Tags.SOPClassUID).Values(0)
            Dim ReferencedSOPInstanceUID As String = RTRecordDataSet(Tags.SOPInstanceUID).Values(0)

            message.DataSet.Set(Tags.UPSPerformedProcedureOutputInformationSequenceStudyInstanceUID, UI, StudyInstanceUID)
            message.DataSet.Set(Tags.UPSPerformedProcedureOutputInformationSequenceSerieInstanceUID, UI, SerieInstanceUID)

            message.DataSet.Set(Tags.UPSPerformedProcedureOutputInformationSequenceReferencedSOPSequenceRefSOPClassUID, UI, ReferencedSOPClassUID)
            message.DataSet.Set(Tags.UPSPerformedProcedureOutputInformationSequenceReferencedSOPSequenceRefSOPInstanceUID, UI, ReferencedSOPInstanceUID)

            Dim config As TestToolConfiguration = TestToolConfiguration.GetInstance()
            Dim dvtkSettingOST As DVTKAEConfiguration = config.GetDVTKAEConfiguration(New OSTActor().Id)

            message.DataSet.Set(Tags.UPSPerformedProcedureOutputInformationSequenceDICOMRetrievalSequenceAETitle, AE, dvtkSettingOST.AETitle)
        End If
    End Sub

    Protected Overrides Function GetTransactionReferenceDataMessages() As System.Collections.ArrayList

        ' Some rules need the dataset used in the request.
        Dim referenceData As ReferenceDataSet = ReferenceDataSet.GetInstance
        referenceData.LoadNewDataSet(DataSetHandler.UPSMessagesXMLFileName)

        Dim datasetMessages As ArrayList = New ArrayList()

        Dim message As DicomMessage = ReferenceDataSet.GetInstance().GetUnifiedProcedureStepPush_NSET_REQ_RO64()
        CopyInterOperabilityAttributes(message)

        If m_isRadiationDelivered = False Then
            message.Set(Tags.UPSProgressInformationUnifiedProcedureStepProgress, DS, "0")
            message.DataSet(Tags.UPSPerformedProcedureSequence).Delete()
        End If

        If m_isCancelled Then
            message.DataSet.Set(Tags.UPSProgressInformationUnifiedProcedureStepCancellationDateTime, DT, DateTime.Now().ToString("yyyyMMddHHmmss") + ".0000")

            message.Set(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodeValue, SH, "110526")
            message.Set(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodingSchemeDesignator, SH, "DCM")
            message.Set(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodeMeaning, LO, "Resource pre-empted")

        End If

        ' Set the Requested SOPClassUID 
        message.Set(Tags.RequestedSOPClassUID, UI, SOPclass.UnifiedProcedureStepPushSOPClassUID)

        datasetMessages.Add(message)

        Return datasetMessages

    End Function

    ' This function returns all common rules that apply on a request of this transaction
    Public Function GetCommonTransactionRulesForRequest() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        '(0x00001001)  Requested SOP Instance UID
        m_rules.Add(New InterOperabilityRule(Tags.SOPInstanceUID, Tags.RequestedSOPInstanceUID, DataSetHandler.UPSCacheXMLFileName, createCFindRespString(), ro64IODType, ErrorSeverity.RuleError))

        '(0x00081195)  Transaction UID
        m_rules.Add(New IsRequiredRule(Tags.TransactionUID, ro64IODType, ErrorSeverity.RuleError))
        'Use Transaction UID of RO-60 that is send by tms, this transaction UID is used during the total delivery.
        m_rules.Add(New InterOperabilityRule(Tags.TransactionUID, Tags.TransactionUID, DataSetHandler.UPSCacheXMLFileName, createNActionReqString(), ro64IODType, ErrorSeverity.RuleError))
        ' (0x00080016)  SOP Class UID
        m_rules.Add(New NotPresentRule(Tags.SOPClassUID, ro64IODType, ErrorSeverity.RuleError))

        ' (0x00080018)  SOP Instance UID
        m_rules.Add(New NotPresentRule(Tags.SOPInstanceUID, ro64IODType, ErrorSeverity.RuleError))

        ' (0x00741000)  Unified Procedure Step State
        m_rules.Add(New NotPresentRule(Tags.ProcedureStepState, ro64IODType, ErrorSeverity.RuleError))

        ' (0x00404010) Scheduled Procedure Step Modification Date and Time
        m_rules.Add(New OptionalRule(Tags.ScheduledProcedureStepModificationDateandTime, ro64IODType, ErrorSeverity.RuleError))

        If m_isRadiationDelivered = True Then
            ' > (0x00741216)  UPS Performed Procedure Sequence
            If m_progress > 0 Then
                m_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedureSequence, ro64IODType, ErrorSeverity.RuleError))
            Else
                m_rules.Add(New OptionalRule(Tags.UPSPerformedProcedureSequence, ro64IODType, ErrorSeverity.RuleError))
            End If

            ' > (0x00404028)  Performed Station Name Code Sequence
            m_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedurePerformedStationNameCodeSequence, ro64IODType, ErrorSeverity.RuleError))
            ' >> (0x00080100)  Code Value
            m_rules.Add(New ConditionalSequenceRule(Tags.UPSPerformedProcedurePerformedStationNameCodeSequence, New InterOperabilityRule(Tags.ScheduledStationCodeValue, Tags.UPSPerformedProcedurePerformedStationNameCodeCodeValue, DataSetHandler.UPSMessagesXMLFileName, createCFindRespString(), ro64IODType, ErrorSeverity.RuleError)))
            ' >> (0x00080102)  Coding Scheme Designator
            m_rules.Add(New ConditionalSequenceRule(Tags.UPSPerformedProcedurePerformedStationNameCodeSequence, New InterOperabilityRule(Tags.ScheduledStationCodingSchemeDesignator, Tags.UPSPerformedProcedurePerformedStationNameCodeCodingSchemeDesignator, DataSetHandler.UPSMessagesXMLFileName, createCFindRespString(), ro64IODType, ErrorSeverity.RuleError)))
            ' >> (0x00080104)  Code Meaning
            m_rules.Add(New ConditionalSequenceRule(Tags.UPSPerformedProcedurePerformedStationNameCodeSequence, New InterOperabilityRule(Tags.ScheduledStationCodeMeaning, Tags.UPSPerformedProcedurePerformedStationNameCodeCodeMeaning, DataSetHandler.UPSMessagesXMLFileName, createCFindRespString(), ro64IODType, ErrorSeverity.RuleError)))

            ' (0x00404050) Scheduled Procedure Step Start Date and Time
            m_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedureSequencePerformedProcedureStepStartDateTime, ro64IODType, ErrorSeverity.RuleError))
            m_rules.Add(New HasValueRule(Tags.UPSPerformedProcedureSequencePerformedProcedureStepStartDateTime, ro64IODType, ErrorSeverity.RuleError))

            ' (0x00404051) Scheduled Procedure Step End Date and Time
            m_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedureSequenceScheduledProcedureStepEndDateTime, ro64IODType, ErrorSeverity.RuleError))
            m_rules.Add(New HasValueRule(Tags.UPSPerformedProcedureSequenceScheduledProcedureStepEndDateTime, ro64IODType, ErrorSeverity.RuleError))

            ' > (0x00404019)  Performed Workitem Code Sequence
            m_rules.Add(New OptionalRule(Tags.UPSPerformedProcedurePerformedWorkitemCodeSequence, ro64IODType, ErrorSeverity.RuleError))
            ' >> (0x00080100)  Code Value
            m_rules.Add(New ConditionalSequenceRule(Tags.UPSPerformedProcedurePerformedWorkitemCodeSequence, New InterOperabilityRule(Tags.ScheduledWorkitemCodeValue, Tags.UPSPerformedProcedurePerformedWorkitemCodeCodeValue, DataSetHandler.UPSMessagesXMLFileName, createCFindRespString(), ro64IODType, ErrorSeverity.RuleError)))
            ' >> (0x00080102)  Coding Scheme Designator
            m_rules.Add(New ConditionalSequenceRule(Tags.UPSPerformedProcedurePerformedWorkitemCodeSequence, New InterOperabilityRule(Tags.ScheduledWorkitemCodingSchemeDesignator, Tags.UPSPerformedProcedurePerformedWorkitemCodeCodingSchemeDesignator, DataSetHandler.UPSMessagesXMLFileName, createCFindRespString(), ro64IODType, ErrorSeverity.RuleError)))
            ' >> (0x00080104)  Code Meaning
            m_rules.Add(New ConditionalSequenceRule(Tags.UPSPerformedProcedurePerformedWorkitemCodeSequence, New InterOperabilityRule(Tags.ScheduledWorkitemCodeMeaning, Tags.UPSPerformedProcedurePerformedWorkitemCodeCodeMeaning, DataSetHandler.UPSMessagesXMLFileName, createCFindRespString(), ro64IODType, ErrorSeverity.RuleError)))

            ' > (0x00404033)  Output Information Sequence
            m_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedureOutputInformationSequence, ro64IODType, ErrorSeverity.RuleError))
            ' >> (0x0040E021)  Type of Instances
            m_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedureOutputInformationSequenceTypeOfInstances, ro64IODType, ErrorSeverity.RuleError))
            m_rules.Add(New ValueRule(Tags.UPSPerformedProcedureOutputInformationSequenceTypeOfInstances, "DICOM", ro64IODType, ErrorSeverity.RuleError))


            m_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedureOutputInformationSequenceStudyInstanceUID, ro64IODType, ErrorSeverity.RuleError))
            m_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedureOutputInformationSequenceSerieInstanceUID, ro64IODType, ErrorSeverity.RuleError))
            m_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedureOutputInformationSequenceReferencedSOPSequenceRefSOPClassUID, ro64IODType, ErrorSeverity.RuleError))
            m_rules.Add(New ValueRule(Tags.UPSPerformedProcedureOutputInformationSequenceReferencedSOPSequenceRefSOPClassUID, m_RTRecordSopClassUID, ro64IODType, ErrorSeverity.RuleError))
            m_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedureOutputInformationSequenceReferencedSOPSequenceRefSOPInstanceUID, ro64IODType, ErrorSeverity.RuleError))
            m_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedureOutputInformationSequenceDICOMRetrievalSequenceAETitle, ro64IODType, ErrorSeverity.RuleError))

            ' > (0x00404032)   DICOM Retrieval Sequence
            m_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedureOutputInformationSequenceDICOMRetrievalSequence, ro64IODType, ErrorSeverity.RuleError))

            '(0x00080054) retrieveAETitle
            Dim sutSettingOST As SUTAESettingWrapper = TestToolConfiguration.GetInstance().GetSUTAEConfiguration(New OSTActor().Id, CMOVERQ)

            m_rules.Add(New SequenceLoopRule(Tags.OutputInformationSequence, New ValueRule(Tags.UPSPerformedProcedureOutputInformationSequenceDICOMRetrievalSequenceAETitle, sutSettingOST.AETitle, ro64IODType, ErrorSeverity.RuleError)))

            ' > (0x00404032)   Non-DICOM Output Code Sequence
            'm_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedureNonDICOMOutputInformationSequence, ro64IODType, ErrorSeverity.RuleError))
            'm_rules.Add(New EmptySequenceRule(Tags.UPSPerformedProcedureNonDICOMOutputInformationSequence, ro64IODType, ErrorSeverity.RuleError))

        Else

            m_rules.Add(New ValueRule(Tags.UPSProgressInformationUnifiedProcedureStepProgress, "0", ro64IODType, ErrorSeverity.RuleError))
            m_rules.Add(New NotPresentRule(Tags.UPSPerformedProcedureSequence, ro64IODType, ErrorSeverity.RuleError))

        End If

        If m_isCancelled Then

            m_rules.Add(New IsRequiredRule(Tags.UPSProgressInformationUnifiedProcedureStepCancellationDateTime, ro64IODType, ErrorSeverity.RuleError))
            m_rules.Add(New HasValueRule(Tags.UPSProgressInformationUnifiedProcedureStepCancellationDateTime, ro64IODType, ErrorSeverity.RuleError))

            m_rules.Add(New IsRequiredRule(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodeValue, ro64IODType, ErrorSeverity.RuleError))
            m_rules.Add(New HasValueRule(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodeValue, ro64IODType, ErrorSeverity.RuleError))

            m_rules.Add(New IsRequiredRule(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodingSchemeDesignator, ro64IODType, ErrorSeverity.RuleError))
            m_rules.Add(New HasValueRule(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodingSchemeDesignator, ro64IODType, ErrorSeverity.RuleError))

            m_rules.Add(New IsRequiredRule(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodeMeaning, ro64IODType, ErrorSeverity.RuleError))
            m_rules.Add(New HasValueRule(Tags.UPSProgressInformationProcedureStepDiscontinuationReasonCodeSequenceCodeMeaning, ro64IODType, ErrorSeverity.RuleError))

        End If

        Return m_rules

    End Function

    ' This function returns all common rules that apply on a response of this transaction
    Public Function GetCommonTransactionRulesForResponse() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        ' Some rules need the dicomMessage send in the request
        Dim msg As DicomMessage = DirectCast(TransactionDataMessages(0), DicomMessage)

        ' (0x00000002) Affected SOP Class UID
        m_rules.Add(New InterRelationRule(msg, Tags.RequestedSOPClassUID, Tags.AffectedSOPClassUID, ro64IODType, ErrorSeverity.RuleError))

        ' (0x00001000) Affected SOP Instance UID
        m_rules.Add(New IsRequiredRule(Tags.AffectedSOPInstanceUID, ro64IODType, ErrorSeverity.RuleError))
        m_rules.Add(New InterRelationRule(msg, Tags.RequestedSOPInstanceUID, Tags.AffectedSOPInstanceUID, ro64IODType, ErrorSeverity.RuleError))

        ' (0x00000900)  Status should be succeeded
        m_rules.Add(New ValueRule(Tags.StatusCommandElement, "0", ro64IODType, ErrorSeverity.RuleError))

        '(0x00081195)  Transaction UID
        'm_rules.Add(New IsRequiredRule(Tags.TransactionUID, ro64IODType, ErrorSeverity.RuleError))
        'm_rules.Add(New InterRelationRule(msg, Tags.TransactionUID, Tags.TransactionUID, ro64IODType, ErrorSeverity.RuleError))

        Return m_rules

    End Function

    ' Returns the C-FIND-RSP string depending on the procedure step. This String can be used to select the right dataset
    Private Function createCFindRespString() As String
        Dim retVal As String = "C-FIND-RSP"
        Return retVal
    End Function

    ' Returns the N-ACTION-REQ string depending on the procedure step. This String can be used to select the right dataset
    Private Function createNActionReqString() As String
        Dim retVal As String = "N-ACTION-REQ-RO60"
        Return retVal
    End Function

End Class
