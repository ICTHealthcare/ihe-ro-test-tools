#If Not DVT_INTERPRETS_SCRIPT Then
Imports System.Collections.Generic
#End If

'Transaction RO-59 (Retrieve Static Treatment Delivery Input Instances) class
Class RO59Transaction
    Inherits Transaction

    'Constructor
    Public Sub New(ByVal SUTActor As Actor, ByVal storeActor As Actor)

        MyBase.New("RO-59", "Retrieve Static Treatment Delivery Input Instances from OST", IODType.StudyRootQueryRetrieveMOVE, True)
        m_sutActorId = SUTActor.Id 'for TDW: OST
        m_storeActorId = storeActor.Id 'for TDW: TDD
    End Sub

    Private m_sutActorId As String
    Private m_storeActorId As String

    'method which returns the related reference data messages belonging to this transaction
    Protected Overrides Function GetTransactionReferenceDataMessages() As System.Collections.ArrayList
        Dim datasetMessages As ArrayList = New ArrayList()
        Dim referenceData As ReferenceDataSet = ReferenceDataSet.GetInstance()

        Dim messages As DicomMessageCollection = ReferenceDataSet.createCMoveRqRtPlan(DataSetHandler.UPSCacheXMLFileName, m_sutActorId, m_storeActorId)
        If messages.Count = 0 Then
            'NO messages found in the C-FIND repsonses to retrieve from the SCP
            Dim log As String = "The response of the first scenario should have at least a reference to the RT-Plan file (it could be that the AeTitle in the C-FIND-RSP is not the same as the OST ae title in the configuration file."
            Logger.GetInstance().LogErrorMessage(log)
            Return Nothing
        Else
            'add the structure set message to the arraylist
            For Each message As DicomMessage In messages
                datasetMessages.Add(message)
            Next
        End If
        'return the array with dataset(s)
        Return datasetMessages
    End Function

    Public Function GetCommonTransactionRulesForRequest() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        '(0x00080052)  Query/Retrieve Level
        m_rules.Add(New ValueRule(Tags.QueryRetrieveLevel, "IMAGE", IODType.StudyRootQueryRetrieveMOVE, ErrorSeverity.RuleError))
        m_rules.Add(New RequestedCMoveSopInstanceUIDsRule(DataSetHandler.LoadDatasetFromFile(DataSetHandler.UPSCacheXMLFileName, "C-FIND-RSP"), IODType.StudyRootQueryRetrieveMOVE, ErrorSeverity.RuleError))
        ' C-Move-Req bevat geen SOPCLASSUID alleen SopInstanceUID
        'm_rules.Add(New RequestedCMoveSopClassUIDNotRTBDIRule(IODType.StudyRootQueryRetrieveMOVE, ErrorSeverity.RuleError))
        m_rules.Add(New IsRequiredRule(Tags.AffectedSOPClassUID, IODType.StudyRootQueryRetrieveMOVE, ErrorSeverity.RuleError))
        m_rules.Add(New ValueRule(Tags.AffectedSOPClassUID, "1.2.840.10008.5.1.4.1.2.2.2", IODType.StudyRootQueryRetrieveMOVE, ErrorSeverity.RuleError))
        Return m_rules

    End Function

    Public Function GetTransactionRulesForC_StoreRequest() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)
        'Atleast one RTPlan should be received. Rule is performed on the messagecollection, not on every C-Store operation, so only once.

        Dim optionsColletcion As New List(Of IODType)(New IODType() {IODType.RTPlanDosimetric, IODType.RTIonPlan})

        m_rules.Add(New IODOneOfCollectionReceivedRule(optionsColletcion, ErrorSeverity.RuleError))
        m_rules.Add(New IODNotReceivedRule(IODType.RTBeamsDeliveryInstruction, ErrorSeverity.RuleError))
        m_rules.Add(New IsRequiredRule(Tags.AffectedSOPClassUID, IODType.CStoreRequest, ErrorSeverity.RuleError))

        Return m_rules

    End Function

    Public Function GetTransactionRulesForRequest() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        Return m_rules

    End Function

    Public Function GetCommonTransactionRulesForResponse() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        Return m_rules

    End Function

    Public Function GetTransactionRulesForResponse() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        Return m_rules

    End Function

    Public Function GetReceivedObjectRules(ByVal resumed As Boolean) As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        ' Apply validation rules for the received objects
        m_rules.Add(New IsRequiredRule(Tags.BeamTaskSequence, IODType.RTBeamsDeliveryInstruction, ErrorSeverity.RuleError))
        m_rules.Add(New SequenceLoopRule(Tags.BeamTaskSequence, New ValueRule(Tags.BeamTaskType, "TREAT", IODType.RTBeamsDeliveryInstruction, ErrorSeverity.RuleError)))

        If resumed = True Then
            m_rules.Add(New TreatmentDeliveryTypeRule(IODType.RTBeamsDeliveryInstruction, ErrorSeverity.RuleError))
        Else
            m_rules.Add(New SequenceLoopRule(Tags.BeamTaskSequence, New IsRequiredRule(Tags.BeamTaskSequenceTreatmentDeliveryType, IODType.RTBeamsDeliveryInstruction, ErrorSeverity.RuleError)))
            m_rules.Add(New SequenceLoopRule(Tags.BeamTaskSequence, New ValueRule(Tags.BeamTaskSequenceTreatmentDeliveryType, "TREATMENT", IODType.RTBeamsDeliveryInstruction, ErrorSeverity.RuleError)))
        End If

        'If resumed = True Then
        '    'm_rules.Add(New SequenceLoopRule(Tags.BeamTaskSequence, New ValueRule(Tags.BeamTaskSequenceTreatmentDeliveryType, "CONTINUATION", IODType.RTBeamsDeliveryInstruction, ErrorSeverity.RuleError)))
        '    m_rules.Add(New SequenceLoopRule(Tags.BeamTaskSequence, New IsRequiredRule(Tags.BeamTaskSequenceTreatmentDeliveryType, IODType.RTBeamsDeliveryInstruction, ErrorSeverity.RuleError)))
        '    m_rules.Add(New SequenceLoopRule(Tags.BeamTaskSequence, New RequiredConditionalRule(Tags.BeamTaskSequencePrimaryDosimeterUnit, Tags.BeamTaskSequenceTreatmentDeliveryType, "CONTINUATION", IODType.RTBeamsDeliveryInstruction, ErrorSeverity.RuleError)))
        '    m_rules.Add(New SequenceLoopRule(Tags.BeamTaskSequence, New RequiredConditionalRule(Tags.BeamTaskSequenceContinuationStartMeterset, Tags.BeamTaskSequenceTreatmentDeliveryType, "CONTINUATION", IODType.RTBeamsDeliveryInstruction, ErrorSeverity.RuleError)))
        '    m_rules.Add(New SequenceLoopRule(Tags.BeamTaskSequence, New RequiredConditionalRule(Tags.BeamTaskSequenceContinuationEndMeterset, Tags.BeamTaskSequenceTreatmentDeliveryType, "CONTINUATION", IODType.RTBeamsDeliveryInstruction, ErrorSeverity.RuleError)))
        'Else
        '    m_rules.Add(New SequenceLoopRule(Tags.BeamTaskSequence, New IsRequiredRule(Tags.BeamTaskSequenceTreatmentDeliveryType, IODType.RTBeamsDeliveryInstruction, ErrorSeverity.RuleError)))
        'End If

        ''todo implement the treatment delivery type rule!!
        'Dim values(1) As String

        'values(0) = "TREATMENT"
        'values(1) = "CONTINUATION"
        'm_rules.Add(New SequenceLoopRule(Tags.BeamTaskSequence, New ValueListRule(Tags.BeamTaskSequenceTreatmentDeliveryType, values, IODType.RTBeamsDeliveryInstruction, ErrorSeverity.RuleError)))

        Return m_rules

    End Function

End Class
