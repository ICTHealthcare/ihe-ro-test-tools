Class MessageHandlerNSet
    Inherits DvtkHighLevelInterface.Dicom.Threads.MessageHandler

    Private Shared threadId As Integer = 1
    'DimseCommand.NSETRSP
    Public Overrides Function HandleNSetRequest(ByVal dicomMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage) As Boolean

        Dim requestedSOPClassUID As String = dicomMessage.CommandSet.Item(Tags.RequestedSOPClassUID).Values(0)
        If requestedSOPClassUID = SOPclass.UnifiedProcedureStepPushSOPClassUID.ToString() Then

            Dim dicomMessageToSend As DicomMessage = MessageHandlerHelper.CreateResponseMessage(DvtkData.Dimse.DimseCommand.NSETRSP, dicomMessage)
            'dicomMessageToSend.Set(Tags.TransactionUID, UI, dicomMessage(Tags.TransactionUID).Values.Item(0))
            'dicomMessageToSend.Set(Tags.UPSProgressInformationUnifiedProcedureStepProgress, DS, dicomMessage(Tags.UPSProgressInformationUnifiedProcedureStepProgress).Values(0))

            Dim SOPInstanceUID As String = dicomMessage(Tags.RequestedSOPInstanceUID).Values.Item(0)
            Dim TransactionUID As String = dicomMessage.DataSet(Tags.TransactionUID).Values(0).ToString()
            Dim UPSdicomFile As DvtkHighLevelInterface.Dicom.Files.DicomFile = ReferenceDataSet.GetInstance().GetAvailebleUPS(SOPInstanceUID, TransactionUID)

            If Not UPSdicomFile Is Nothing Then

                If UPSdicomFile.DataSet(Tags.ProcedureStepState).Values(0).Equals("IN PROGRESS") Then

                    If UPSdicomFile.DataSet(Tags.TransactionUID).Values(0) = dicomMessage.DataSet(Tags.TransactionUID).Values(0) Then

                        DataSetHandler.UpdateCacheUPS_Nset(dicomMessage)

                        sendNEventReportStatusUpdate(dicomMessage, SOPInstanceUID)
                    Else
                        'UPS transactionUID doesn't match
                        Dim n As Integer = &HC301
                        dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                        dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status 

                    End If

                Else
                    'UPS not in IN PROGRESS State
                    Dim n As Integer = &HC310
                    dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                    dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status 
                End If

            Else
                'SopInstanceUID not on UPS server
                Dim n As Integer = &HC307
                dicomMessageToSend.Set(Tags.ActionTypeID, US, "1")
                dicomMessageToSend.Set(Tags.StatusCommandElement, US, n) ' Status 
            End If


            Send(dicomMessageToSend, dicomMessage.EncodedPresentationContextID)

            Return True

        Else
            Throw New Exception(String.Format("Handling N-SET RQ of Requested SOP Class UID '{0}' not supported", requestedSOPClassUID))
        End If

    End Function

    Private Sub sendNEventReportStatusUpdate(ByVal receivedUpdate As DvtkHighLevelInterface.Dicom.Messages.DicomMessage, ByVal SOPInstanceUID As String)

        'start the N-EVENT-REPORT action
        Dim scenarioName As String = TestToolConfiguration.GetInstance.GetCurrentScenario().GetType().Name
        Dim neventreportThreadName As String = String.Format("NEVENTREPORT Sender ({0}) {1}", scenarioName, threadId.ToString())
        threadId = threadId + 1
        Dim config As TestToolConfiguration = TestToolConfiguration.GetInstance()

        'Retrieve the settings from configuration

        ReferenceDataSet.GetInstance.LoadNewDataSet(DataSetHandler.UPSCacheXMLFileName)
        Dim AEtitlesSubscribers As New List(Of String)
        If File.Exists(ReferenceDataSet.GetInstance.m_datasetPath + "\SUBSCRIBERS\subscribers.txt") Then
            Dim lines As String() = System.IO.File.ReadAllLines(ReferenceDataSet.GetInstance.m_datasetPath + "\SUBSCRIBERS\subscribers.txt")
            For Each line As String In lines
                If (line.Contains(SOPInstanceUID) Or line.Contains("1.2.840.10008.5.1.4.34.5")) Then

                    Dim split As String() = line.Split(" ")

                    AEtitlesSubscribers.Add(split(split.Length() - 3))
                End If
            Next
        Else
            Logger.GetInstance().LogErrorMessage("Error Reading the subscribers file: " + ReferenceDataSet.GetInstance.m_datasetPath + "\SUBSCRIBERS\subscribers.txt")
        End If

        For Each subscriber As String In AEtitlesSubscribers

            Dim subscriberSetting As SubscriberConfiguration = TestToolConfiguration.GetInstance().GetSubscriberConfiguration(subscriber)

            If (String.IsNullOrEmpty(subscriberSetting.AETitle)) Then
                Logger.GetInstance().LogErrorMessage(String.Format("No subscriber configuration for AE-title '{0}' present in the configuration", subscriber))
            Else


                Dim cstoreSenderThread As SenderThread = New SenderThread(neventreportThreadName, subscriberSetting, config.GetDVTKAEConfiguration(New TMSActor().Id, DvtkData.Dimse.DimseCommand.NACTIONRQ))

                Dim messageToSend As DvtkHighLevelInterface.Dicom.Messages.DicomMessage = New DvtkHighLevelInterface.Dicom.Messages.DicomMessage(DvtkData.Dimse.DimseCommand.NEVENTREPORTRQ)

                messageToSend.Set(Tags.AffectedSOPClassUID, UI, SOPclass.UnifiedProcedureStepPushSOPClassUID.ToString())
                messageToSend.Set(Tags.AffectedSOPInstanceUID, UI, SOPInstanceUID)
                messageToSend.Set(Tags.EventTypeID, US, "3")


                messageToSend.DataSet.Set(Tags.UPSProgressInformationUnifiedProcedureStepProgress, DS, receivedUpdate.DataSet(Tags.UPSProgressInformationUnifiedProcedureStepProgress).Values(0))

                If (receivedUpdate.DataSet.Exists(Tags.UPSProgressInformationUnifiedProcedureStepProgressDescription)) Then
                    messageToSend.DataSet.Set(Tags.UPSProgressInformationUnifiedProcedureStepProgressDescription, ST, receivedUpdate.DataSet(Tags.UPSProgressInformationUnifiedProcedureStepProgressDescription).Values(0))
                End If

                If (receivedUpdate.DataSet.Exists(Tags.UPSProgressInformationUnifiedProcedureStepCommunicationsURISequenceContactURI)) Then
                    messageToSend.DataSet.Set(Tags.UPSProgressInformationUnifiedProcedureStepCommunicationsURISequenceContactURI, LO, receivedUpdate.DataSet(Tags.UPSProgressInformationUnifiedProcedureStepCommunicationsURISequenceContactURI).Values(0))
                End If

                If (receivedUpdate.DataSet.Exists(Tags.UPSProgressInformationUnifiedProcedureStepCommunicationsURISequenceContactDisplayName)) Then
                    messageToSend.DataSet.Set(Tags.UPSProgressInformationUnifiedProcedureStepCommunicationsURISequenceContactDisplayName, LO, receivedUpdate.DataSet(Tags.UPSProgressInformationUnifiedProcedureStepCommunicationsURISequenceContactDisplayName).Values(0))
                End If

                cstoreSenderThread.AddMessageToSend(messageToSend)
                cstoreSenderThread.Start()
                cstoreSenderThread.WaitForCompletion()
            End If

        Next

    End Sub


End Class