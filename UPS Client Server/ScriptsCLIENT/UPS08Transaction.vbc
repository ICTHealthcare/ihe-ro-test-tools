#If Not DVT_INTERPRETS_SCRIPT Then
Imports System.Collections.Generic
#End If

Class UPS08Transaction
    Inherits Transaction

    Private ups08IODType As IODType = Nothing
    Private _deletionLock As Boolean = Nothing
    Private _globalSubOrUnsub As Boolean = Nothing
    Private _suspend As Boolean = Nothing

    'Constructor
    Public Sub New(ByVal deletionLock As Boolean, ByVal globalSubOrUnsub As Boolean, ByVal suspend As Boolean)
        MyClass.New(True, deletionLock, globalSubOrUnsub, suspend)
    End Sub

    'Constructor
    Public Sub New(ByVal clearMessageDataAfterSend As Boolean, ByVal deletionLock As Boolean, ByVal globalSubOrUnsub As Boolean, ByVal suspend As Boolean)
        MyBase.New("UPS-08", "Subscribe on UPS", IODType.UnifiedProcedureStepPush, clearMessageDataAfterSend)
        ups08IODType = IODType.UnifiedProcedureStepPush
        _deletionLock = deletionLock
        _globalSubOrUnsub = globalSubOrUnsub
        _suspend = suspend
    End Sub

    Protected Overrides Function GetTransactionReferenceDataMessages() As System.Collections.ArrayList
        Dim datasetMessages As ArrayList = New ArrayList()

        Dim selectUPSForm As SelectUPS = New SelectUPS()
        Dim giveAETitleDialog As GiveAETitleDialog = New GiveAETitleDialog()


        If Not _globalSubOrUnsub And Not _suspend Then
            selectUPSForm.responseDataSets = ReferenceDataSet.GetInstance.GetCacheCFind_Responses()

            selectUPSForm.DataGridUPS.MultiSelect = False
            selectUPSForm.SetUPSInProgress.Text = "Send N-Action-RQ to subscribe on selected UPS"
            selectUPSForm.ShowDialog()

            If selectUPSForm.DialogResult = Windows.Forms.DialogResult.OK Then

                giveAETitleDialog.ShowDialog()

                If giveAETitleDialog.DialogResult = Windows.Forms.DialogResult.OK Then

                    For Each DataRow As DataGridViewRow In selectUPSForm.UPSDataGridView.Rows

                        If (DataRow.Selected) Then

                            Dim SOPInstanceUID As String = DataRow.Cells("SopInstanceUIDColumn").Value.ToString()

                            If Not (String.IsNullOrEmpty(SOPInstanceUID)) Then
                                ' Make the N-ACTION-RQ message
                                Dim message As DicomMessage = New DicomMessage(NACTIONRQ)

                                ' Set the Requested SOPClassUID 
                                message.Set(Tags.RequestedSOPClassUID, UI, SOPclass.UnifiedProcedureStepPushSOPClassUID)

                                ' Set the Requested SOP Instance UID
                                message.Set(Tags.RequestedSOPInstanceUID, UI, SOPInstanceUID)

                                ' ActionType ID
                                message.Set(Tags.ActionTypeID, US, "3")

                                ' Set the Receiving AE
                                message.DataSet.Set(Tags.ReceivingAE, AE, giveAETitleDialog.AETitle)

                                ' Deletion lock
                                If _deletionLock Then
                                    message.Set(Tags.DeletionLock, LO, "TRUE")
                                Else
                                    message.Set(Tags.DeletionLock, LO, "FALSE")
                                End If


                                datasetMessages.Add(message)

                            Else
                                Logger.GetInstance().LogErrorMessage(String.Format("Selected UPS has not an SOP Instance UID"))
                            End If

                        End If

                    Next

                End If
            Else
                ' cancel scenario
            End If
        ElseIf Not _suspend Then

            giveAETitleDialog.ShowDialog()

            If giveAETitleDialog.DialogResult = Windows.Forms.DialogResult.OK Then

                Dim message As DicomMessage = New DicomMessage(NACTIONRQ)

                ' Set the Requested SOPClassUID 
                message.Set(Tags.RequestedSOPClassUID, UI, SOPclass.UnifiedProcedureStepPushSOPClassUID)

                ' Set the Requested SOP Instance UID
                message.Set(Tags.RequestedSOPInstanceUID, UI, "1.2.840.10008.5.1.4.34.5")

                ' ActionType ID
                message.Set(Tags.ActionTypeID, US, "3")

                ' Set the Receiving AE
                message.DataSet.Set(Tags.ReceivingAE, AE, giveAETitleDialog.AETitle)

                ' Deletion lock
                If _deletionLock Then
                    message.Set(Tags.DeletionLock, LO, "TRUE")
                Else
                    message.Set(Tags.DeletionLock, LO, "FALSE")
                End If



                datasetMessages.Add(message)
            End If
        Else
            ' Suspend logic
            giveAETitleDialog.ShowDialog()

            If giveAETitleDialog.DialogResult = Windows.Forms.DialogResult.OK Then

                Dim message As DicomMessage = New DicomMessage(NACTIONRQ)

                ' Set the Requested SOPClassUID 
                message.Set(Tags.RequestedSOPClassUID, UI, SOPclass.UnifiedProcedureStepPushSOPClassUID)

                ' Set the Requested SOP Instance UID
                message.Set(Tags.RequestedSOPInstanceUID, UI, "1.2.840.10008.5.1.4.34.5")

                ' ActionType ID
                message.Set(Tags.ActionTypeID, US, "5")

                ' Set the Receiving AE
                message.DataSet.Set(Tags.ReceivingAE, AE, giveAETitleDialog.AETitle)


                datasetMessages.Add(message)
            End If

        End If

        Return datasetMessages

    End Function

    ' This function returns all common rules that apply on a response of this transaction
    Public Function GetCommonTransactionRulesForResponse() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        '(0x00000900)  Status
        m_rules.Add(New HexadecimalValueRule(Tags.StatusCommandElement, "0", ups08IODType, ErrorSeverity.RuleError))

        Return m_rules

    End Function


End Class
