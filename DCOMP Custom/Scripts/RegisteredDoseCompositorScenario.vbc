Class RegisteredDoseCompositorScenario
    Inherits Scenario

    'Constructor
    Public Sub New()

        ' Specify data sets to use.
        m_scenarioDatasetXmlFileName = "DataSets.xml"
        ReferenceDataSet.GetInstance().LoadNewDataSet(m_scenarioDatasetXmlFileName)

        ' Create actors.
        Dim archiveActor As ArchiveActor = New ArchiveActor()
        Dim registeredDoseCompositorActor As RegisteredDoseCompositorActor = New RegisteredDoseCompositorActor()

        'Create dialog for selecting files
        Dim registeredDoseCompositorDataset As New DCOMPRegisteredDoseCompositorDataset()
        registeredDoseCompositorDataset.ShowDialog()

        Dim imageIODType As IODType
        Dim dirInfo As IO.DirectoryInfo = New IO.DirectoryInfo(registeredDoseCompositorDataset.tbSelectedImageSet.Text)
        Dim files As IO.FileInfo() = dirInfo.GetFiles("*.dcm")
        If files.Length > 0 Then
            Dim file As IO.FileInfo
            file = files(0)
            Dim tempImage As New DvtkHighLevelInterface.Dicom.Files.DicomFile
            Try
                tempImage.Read(file.FullName)

                If (tempImage.DataSet(Tags.SOPClassUID).Values(0).ToString() = SOPclass.CTImageSOPClassUID) Then
                    imageIODType = IODType.CTImage
                ElseIf (tempImage.DataSet(Tags.SOPClassUID).Values(0).ToString() = SOPclass.MRImageSOPClassUID) Then
                    imageIODType = IODType.MRImage
                ElseIf (tempImage.DataSet(Tags.SOPClassUID).Values(0).ToString() = SOPclass.PetImageSOPClassUID) Then
                    imageIODType = IODType.PETImage
                End If

            Catch ex As Exception
                Reporter.GetInstance.ReportWarningMessage(file.FullName + " cannot be read by DVTk")
            End Try
        End If

        ' Create transactions.
        Dim mmro_2_Transaction As MMRO_II_2_Transaction = New MMRO_II_2_Transaction(New String() {registeredDoseCompositorDataset.tbSelectedSpatialReg.Text}) ' Spatial Registration Retrieval
        Dim ro_DC1_Transaction1 As RO_DC1_Transaction = New RO_DC1_Transaction(New String() {registeredDoseCompositorDataset.tbSelectedDose.Text}) ' General Dose Retrieval.
        'Dim ro_DC1_Transaction2 As RO_DC1_Transaction = New RO_DC1_Transaction(New String() {"RD2P.dcm"}) ' General Dose Retrieval.
        Dim rad_4_8_Transaction1 As RAD_4_8_Transaction = New RAD_4_8_Transaction(imageIODType, registeredDoseCompositorDataset.tbSelectedImageSet.Text) ' Modality Images Stored (CT images).
        'Dim rad_4_8_Transaction2 As RAD_4_8_Transaction = New RAD_4_8_Transaction(IODType.CTImage, "CT2*.dcm") ' Modality Images Stored (CT images).
        Dim ro_DC2_Transaction As RO_DC2_Transaction = New RO_DC2_Transaction() ' Composite Dose Storage.

        ' Send scenario step.
        Dim sendTestDataDialog As SendTestDataDialog = New SendTestDataDialog(registeredDoseCompositorActor)
        sendTestDataDialog.ShowDialog()

        Dim sendScenarioStep As SendScenarioStep = New SendScenarioStep(archiveActor, registeredDoseCompositorActor)

        If (sendTestDataDialog.DialogResult = Windows.Forms.DialogResult.Yes) Then

            sendScenarioStep.AddTransaction(rad_4_8_Transaction1)
            sendScenarioStep.AddTransaction(ro_DC1_Transaction1)
            'sendScenarioStep.AddTransaction(rad_4_8_Transaction2)
            'sendScenarioStep.AddTransaction(ro_DC1_Transaction2)
            sendScenarioStep.AddTransaction(mmro_2_Transaction)
            m_scenarioSteps.Add(sendScenarioStep)

        End If

        ' Receive scenario step.
        Dim receiveScenarioStep As ReceiveScenarioStep = New ReceiveScenarioStep(archiveActor, registeredDoseCompositorActor, DvtkData.Dimse.DimseCommand.CSTORERQ, New String() {registeredDoseCompositorDataset.tbSelectedStoragePath.Text + "\CompositeDose.dcm"})
        receiveScenarioStep.AddTransaction(ro_DC2_Transaction)
        m_scenarioSteps.Add(receiveScenarioStep)

        ' Validate scenario step
        Dim validateScenarioStep As ValidateScenarioStep = New ValidateScenarioStep(receiveScenarioStep)
        validateScenarioStep.AddRules(RORulesFactory.CreateCriticalAttributeMappingRules(ReferenceDataSet.GetInstance().GetStorageSopInstances(registeredDoseCompositorDataset.tbSelectedImageSet.Text, imageIODType), IODType.RTDose))
        validateScenarioStep.AddRules(RORulesFactory.CreateRTDoseIodCriticalModuleRules())
        validateScenarioStep.AddRules(RORulesFactory.CreateRTDoseIodCriticalAttributeRules())
        validateScenarioStep.AddRules(RulesFactory.Create_RO_DC2_TransactionRulesForRegisteredDoseCompositorScenario(registeredDoseCompositorDataset.tbSelectedDose.Text))
        m_scenarioSteps.Add(validateScenarioStep)

        ' Clean up scenario step
        If TestToolConfiguration.GetInstance.DoCleanUp = True Then
            m_scenarioSteps.Add(New CleanUpScenarioStep(TestToolConfiguration.GetInstance.GetSession.ResultsRootDirectory))
        End If

    End Sub

End Class
