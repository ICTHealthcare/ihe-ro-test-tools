Class LeafJawPositionRule
    Inherits AttributeRule
    ''' <summary>
    ''' This rule determines if values of an attribute for corresponding
    ''' discriminator are the same throughout different items.
    ''' The last tag should not be present!!
    ''' </summary>
    ''' <param name="sequenceItemTag">tag of the sequence item in which the attribute to be checked occurs</param>
    ''' <param name="discrTag">tag of the discriminator which should have the sam value</param>
    ''' <param name="valueTag">tag of the attribute which should have the sam value</param>
    ''' <param name="iodType"></param>
    ''' <param name="severity"></param>
    ''' <remarks></remarks>
    Public Sub New(ByVal discrTag As String, ByVal valueTag As String, ByVal sequenceItemTag As String, _
                    ByVal iodType As IODType, ByVal severity As ErrorSeverity)

        MyBase.New("Leaf/Jaw Position Value Rule", valueTag, iodType, severity)

        m_TagDiscrim = discrTag
        m_SequenceItemTag = sequenceItemTag

    End Sub

    Private m_TagDiscrim As String
    Private m_SequenceItemTag As String

    Public Overrides Sub ApplyRule(ByRef dicomMessage As DvtkHighLevelInterface.Dicom.Messages.DicomMessage, ByVal iodType As IODType)
        Dim message As String = ""
        Dim table As New Hashtable

        If iodType = IODTypeRule Then
            If Not dicomMessage.Exists(m_SequenceItemTag) Then
                message = "The attribute '" + Tags.GetTagName(m_SequenceItemTag) + "' (" + m_SequenceItemTag + ") is not present in the dataset."
                Me.SetValid(message)
                Me.Report()
            Else
                Dim NumberOfAtributes As Integer = dicomMessage.DataSet.GetitemCount(m_SequenceItemTag)
                Dim lastElementIsPressent As Boolean = False
                If NumberOfAtributes > 0 Then
                    If Not dicomMessage.Exists(getItemInSQTag(1, m_SequenceItemTag)) Then
                        message = "The attribute '" + Tags.GetTagName(getItemInSQTag(1, m_TagSequence)) + "' (" + getItemInSQTag(1, m_TagSequence) + " is not present in the dataset."
                        Me.SetError(message)
                        Me.Report()

                    Else
                        Dim valueFound As Boolean = True
                        Dim sameValue As Boolean = True
                        For i As Integer = 1 To NumberOfAtributes
                            Dim tagDiscr As String = getItemInSQTagDiscr(i, m_SequenceItemTag)
                            Dim tagValue As String = getItemInSQTag(i, m_SequenceItemTag)

                            If Not dicomMessage.Exists(tagDiscr) Then
                                message = "The attribute '" + Tags.GetTagName(tagDiscr) + "' (" + tagDiscr + _
                                            ") is not present in the dataset."
                                valueFound = False
                                Me.SetError(message)
                                Exit For
                            ElseIf Not dicomMessage.Exists(tagValue) Then
                                message = "The attribute '" + Tags.GetTagName(tagValue) + "' (" + tagValue + _
                                            ") is not present in the dataset."
                                Me.SetError(message)
                                valueFound = False
                                Exit For
                            Else
                                'if current discriminator, value (key, value) is not present, add it
                                If Not table.ContainsKey(dicomMessage(tagDiscr).Values.ToString()) Then
                                    table.Add(dicomMessage(tagDiscr).Values.ToString(), _
                                                dicomMessage(tagValue).Values.ToString())
                                End If

                                'compare current value with existing one
                                If Not table.Item(dicomMessage(tagDiscr).Values.ToString()).Equals(dicomMessage(tagValue).Values.ToString()) Then
                                    If Not message.Equals("") Then
                                        message = message + ControlChars.NewLine
                                    End If
                                    message = message + "The discriminator '" + Tags.GetTagName(tagDiscr) + "' (" + tagDiscr + _
                                                ") has value " + dicomMessage(tagDiscr).Values.ToString() + "." + ControlChars.NewLine + _
                                                "The attribute '" + Tags.GetTagName(tagValue) + "' (" + tagValue + _
                                                ") has different value(s) " + "(" + dicomMessage(tagValue).Values.ToString() + _
                                                ") than previous value(s) " + "(" + table.Item(dicomMessage(tagDiscr).Values.ToString()).ToString + ")."
                                    sameValue = False
                                End If
                            End If
                        Next

                        If valueFound Then
                            If sameValue Then
                                message = "Throughout the different discriminator-attribute, the same values have been found:"
                                message = message + ControlChars.NewLine + " " + _
                                            Tags.GetTagName(getItemInSQTagDiscrX(m_SequenceItemTag)) + " (" + getItemInSQTagDiscrX(m_SequenceItemTag) + ") - " + _
                                            Tags.GetTagName(getItemInSQTagX(m_SequenceItemTag)) + " (" + getItemInSQTagX(m_SequenceItemTag) + ")" + _
                                            ControlChars.NewLine + "--------------------------------------------"
                                Dim pair As DictionaryEntry
                                For Each pair In table
                                    message = message + ControlChars.NewLine + " " + pair.Key.ToString + " - " + pair.Value.ToString
                                Next
                                message = message + ControlChars.NewLine + "--------------------------------------------"
                                Me.SetValid(message)
                            Else
                                message = message + ControlChars.NewLine + "--------------------------------------------"
                                message = message + ControlChars.NewLine + "Throughout the different discriminator-attribute, different values have been found:"
                                message = message + ControlChars.NewLine + " " + _
                                            Tags.GetTagName(getItemInSQTagDiscrX(m_SequenceItemTag)) + " (" + getItemInSQTagDiscrX(m_SequenceItemTag) + ") - " + _
                                            Tags.GetTagName(getItemInSQTagX(m_SequenceItemTag)) + " (" + getItemInSQTagX(m_SequenceItemTag) + ")" + _
                                            ControlChars.NewLine + "--------------------------------------------"
                                Dim pair As DictionaryEntry
                                For Each pair In table
                                    message = message + ControlChars.NewLine + pair.Key.ToString + " - " + pair.Value.ToString
                                Next
                                message = message + ControlChars.NewLine + "--------------------------------------------"
                                For i As Integer = 1 To NumberOfAtributes
                                    Dim tagDiscr As String = getItemInSQTagDiscr(i, m_SequenceItemTag)
                                    Dim tagValue As String = getItemInSQTag(i, m_SequenceItemTag)

                                    If Not table.Item(dicomMessage(tagDiscr).Values.ToString()).Equals(dicomMessage(tagValue).Values.ToString()) Then
                                        message = message + ControlChars.NewLine
                                        message = message + dicomMessage(tagDiscr).Values.ToString() + " - " + dicomMessage(tagValue).Values.ToString()
                                        message = message + " <== " + tagDiscr + " - " + tagValue
                                    End If
                                Next
                                message = message + ControlChars.NewLine + "--------------------------------------------"
                                Me.SetError(message)
                            End If
                        End If

                    End If
                Else
                    message = "No items are present in attibute: '" + Tags.GetTagName(m_SequenceItemTag) + "' (" + m_SequenceItemTag + ")."
                    Me.SetValid(message)
                End If
            End If
            Me.Report()
        End If
    End Sub

    'item = itemnumber in the sequence attribute
    'sequenceTag= indicates which item should be raised
    Public Function getItemInSQTagDiscr(ByVal item As Integer, ByVal sequenceItemTag As String) As String
        'position indicates at which place the number should be raised, based upon the sequenceItemTag
        Dim position As Integer = Len(sequenceItemTag) + 2
        'the new tag sequence is constucted of the original left part, the item number and the original right part
        Dim TagSequence As String = Left(m_TagDiscrim, position - 1) + item.ToString + Right(m_TagDiscrim, Len(m_TagDiscrim) - position)
        Return TagSequence
    End Function

    Public Function getItemInSQTagX(ByVal sequenceItemTag As String) As String
        'position indicates at which place the number should be raised, based upon the sequenceItemTag
        Dim position As Integer = Len(sequenceItemTag) + 2
        'the new tag sequence is constucted of the original left part, the item number and the original right part
        Dim TagSequence As String = Left(m_TagSequence, position - 1) + "X" + Right(m_TagSequence, Len(m_TagSequence) - position)
        Return TagSequence
    End Function

    Public Function getItemInSQTagDiscrX(ByVal sequenceItemTag As String) As String
        'position indicates at which place the number should be raised, based upon the sequenceItemTag
        Dim position As Integer = Len(sequenceItemTag) + 2
        'the new tag sequence is constucted of the original left part, the item number and the original right part
        Dim TagSequence As String = Left(m_TagDiscrim, position - 1) + "X" + Right(m_TagDiscrim, Len(m_TagDiscrim) - position)
        Return TagSequence
    End Function

End Class

