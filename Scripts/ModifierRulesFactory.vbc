#If Not DVT_INTERPRETS_SCRIPT Then
Imports System.Collections.Generic
#End If


Class ModifierRulesFactory

    Public Shared Function CreateHardWedgeRules(ByVal maxNumberOfBeamModifiers As Integer) As System.Collections.Generic.IEnumerable(Of Rule)

        Dim beam_rules As List(Of Rule) = New List(Of Rule)
        'not standard in case motorized wedge beam, but MOTORIZED. And DYNAMIC in dynamic wedge beam

        beam_rules.Add(New BeamModifierDetectionRule(Tags.NumberOfWedges, Modifier.HardWedgeBeamModifier, IODType.RTPlanDosimetric))
        beam_rules.Add(New IsRequiredRule(Tags.ControlPointSequence, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))

        beam_rules.Add(New NrOfSequenceItemRule(Tags.WedgeSequence, Tags.NumberOfWedges, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))
        beam_rules.Add(New SequenceLoopRule(Tags.WedgeSequence, New IsRequiredRule(Tags.WedgeType, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.WedgeSequence, New ValueRule(Tags.WedgeType, "STANDARD", IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.WedgeSequence, New IsRequiredRule(Tags.WedgeID, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.WedgeSequence, New IsRequiredRule(Tags.WedgeAngle, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.WedgeSequence, New IsRequiredRule(Tags.WedgeOrientation, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.WedgeSequence, New IsRequiredRule(Tags.SourceToWedgeTrayDistance, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New IsRequiredRule(Tags.ControlPointSequence, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))
        beam_rules.Add(New SequenceLoopRule(Tags.WedgeSequence, New IsRequiredRule(Tags.WedgePositionSequence, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))

        beam_rules.Add(New SequenceLoopRule(Tags.ControlPointSequence, New ValueRule(Tags.WedgePosition, "IN", IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))

        Return beam_rules

    End Function

    Public Shared Function CreateBolusRules(ByVal maxNumberOfBeamModifiers As Integer) As System.Collections.Generic.IEnumerable(Of Rule)

        Dim beam_rules As List(Of Rule) = New List(Of Rule)

        beam_rules.Add(New BeamModifierDetectionRule(Tags.NumberOfBoli, Modifier.BolusBeamModifier, IODType.RTPlanDosimetric))
        beam_rules.Add(New IsRequiredRule(Tags.NumberOfBoli, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))
        beam_rules.Add(New SequenceRangeRule(Tags.ReferencedBolusSequence, 0, maxNumberOfBeamModifiers, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))

        beam_rules.Add(New NrOfSequenceItemRule(Tags.ReferencedBolusSequence, Tags.NumberOfBoli, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))

        beam_rules.Add(New SequenceLoopRule(Tags.ReferencedBolusSequence, New IsRequiredRule(Tags.BolusID, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))

        'added to test if this rule is checked
        'beam_rules.Add(New IsRequiredRule(Tags.UPSPerformedProcedurePerformedProcessingParametersConceptNameCodeCodeValue, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))

        Return beam_rules

    End Function

    Public Shared Function CreateBlockRules(ByVal maxNumberOfBeamModifiers As Integer) As System.Collections.Generic.IEnumerable(Of Rule)

        Dim beam_rules As List(Of Rule) = New List(Of Rule)

        beam_rules.Add(New BeamModifierDetectionRule(Tags.NumberOfBlocks, Modifier.BlockBeamModifier, IODType.RTPlanDosimetric))
        beam_rules.Add(New SequenceRangeRule(Tags.BlockSequence, 0, maxNumberOfBeamModifiers, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))

        beam_rules.Add(New NrOfSequenceItemRule(Tags.BlockSequence, Tags.NumberOfBlocks, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))
        beam_rules.Add(New SequenceLoopRule(Tags.BlockSequence, New IsRequiredRule(Tags.BlockTrayID, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.BlockSequence, New IsRequiredRule(Tags.SourceToBlockTrayDistance, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.BlockSequence, New IsRequiredRule(Tags.BlockDivergence, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.BlockSequence, New IsRequiredRule(Tags.BlockMountingPosition, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.BlockSequence, New IsRequiredRule(Tags.BlockMaterialID, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.BlockSequence, New IsRequiredRule(Tags.BlockThickness, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.BlockSequence, New IsRequiredRule(Tags.BlockNumberOfPoints, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.BlockSequence, New IsRequiredRule(Tags.BlockData, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))

        Return beam_rules

    End Function

    Public Shared Function CreateCompensatorRules(ByVal maxNumberOfBeamModifiers As Integer) As System.Collections.Generic.IEnumerable(Of Rule)

        Dim beam_rules As List(Of Rule) = New List(Of Rule)

        beam_rules.Add(New BeamModifierDetectionRule(Tags.NumberOfCompensators, Modifier.CompensatorBeamModifier, IODType.RTPlanDosimetric))
        beam_rules.Add(New SequenceRangeRule(Tags.CompensatorSequence, 0, maxNumberOfBeamModifiers, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))

        beam_rules.Add(New NrOfSequenceItemRule(Tags.CompensatorSequence, Tags.NumberOfCompensators, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))
        beam_rules.Add(New SequenceLoopRule(Tags.CompensatorSequence, New IsRequiredRule(Tags.CompensatorType, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.CompensatorSequence, New ValueRule(Tags.CompensatorType, "STANDARD", IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.CompensatorSequence, New IsRequiredRule(Tags.CompensatorMaterialID, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.CompensatorSequence, New IsRequiredRule(Tags.CompensatorID, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.CompensatorSequence, New IsRequiredRule(Tags.SourceToCompensatorTrayDistance, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.CompensatorSequence, New IsRequiredRule(Tags.CompensatorDivergence, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))

        Dim values(1) As String
        values(0) = "PATIENT_SIDE"
        values(1) = "SOURCE_SIDE"

        beam_rules.Add(New SequenceLoopRule(Tags.CompensatorSequence, New IsRequiredRule(Tags.CompensatorMountingPosition, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.CompensatorSequence, New ValueListRule(Tags.CompensatorMountingPosition, values, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))

        beam_rules.Add(New SequenceLoopRule(Tags.CompensatorSequence, New IsRequiredRule(Tags.CompensatorTransmissionData, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        beam_rules.Add(New SequenceLoopRule(Tags.CompensatorSequence, New IsRequiredRule(Tags.CompensatorThicknessData, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))

        Return beam_rules

    End Function

End Class