
Class TestToolConfiguration

    'the actual instance of the ReferenceDataSet class
    Private Shared m_instance As TestToolConfiguration

    Private m_TestToolConfigurationXML As System.Xml.XmlDocument = Nothing

    Private m_threadManager As DvtkHighLevelInterface.Common.Threads.ThreadManager = Nothing
    Private m_session As Dvtk.Sessions.ScriptSession = Nothing
    Private m_mainThread As DvtkHighLevelInterface.Dicom.Threads.DicomThread = Nothing
    Private m_supportedTransferSyntaxesSender As System.Collections.Specialized.StringCollection = New System.Collections.Specialized.StringCollection
    Private m_supportedTransferSyntaxesReceiver As System.Collections.Specialized.StringCollection = New System.Collections.Specialized.StringCollection
    Private m_reportDebugMessages As Boolean
    Private m_scriptPath As String
    Private m_sessionPath As String

    ReadOnly Property SessionPath() As String
        Get
            Return m_sessionPath
        End Get
    End Property

    'we hide the constructor from the outside
    Private Sub New()
    End Sub

    Public Sub Initialise(ByVal sessionPath As String)

        m_sessionPath = sessionPath
        m_scriptPath = sessionPath + "\Scripts\"

        Try
            If Not System.IO.File.Exists(m_scriptPath + "TestToolConfiguration.xml") Then
                Return
            End If

            'Reset Member Variables
            m_TestToolConfigurationXML = New System.Xml.XmlDocument


            Logger.GetInstance.LogDebugMessages = True
            Try 'loading the XML file
                m_TestToolConfigurationXML.Load(m_scriptPath + "TestToolConfiguration.xml")
            Catch ex As System.Exception
                Throw New System.Exception("Failed Loading the " + m_scriptPath + "TestToolConfiguration.xml")
            End Try

            Dim Version As String
            Try
                Version = m_TestToolConfigurationXML.SelectSingleNode("/TestToolConfiguration/Version").InnerText
            Catch ex As System.Exception
                Throw New System.Exception("There was an error getting the version of the " + m_scriptPath + "TestToolConfiguration.xml file.")
            End Try

            If Not Version = "1" Then
                Throw New System.Exception("This version of the TestToolConfiguration.xml is not supported. Expected: " + Version)
            End If

            Try
                If XMLAttributeExists("TestToolConfiguration/SupportedTransferSyntaxesSender") Then
                    Dim iSyntaxes As Integer
                    For iSyntaxes = 1 To m_TestToolConfigurationXML.SelectSingleNode("TestToolConfiguration/SupportedTransferSyntaxesSender").ChildNodes.Count
                        Dim transferSyntax As String
                        transferSyntax = m_TestToolConfigurationXML.SelectSingleNode("TestToolConfiguration/SupportedTransferSyntaxesSender/TransferSyntax[" + iSyntaxes.ToString() + "]").InnerText()
                        m_supportedTransferSyntaxesSender.Add(transferSyntax)
                    Next
                Else
                    Throw New System.Exception("There were no supported transfersyntaxes found for the sender in the TestToolConfiguration.xml file.")
                End If

                If XMLAttributeExists("TestToolConfiguration/SupportedTransferSyntaxesReceiver") Then
                    Dim iSyntaxes As Integer
                    For iSyntaxes = 1 To m_TestToolConfigurationXML.SelectSingleNode("TestToolConfiguration/SupportedTransferSyntaxesReceiver").ChildNodes.Count
                        Dim transferSyntax As String
                        transferSyntax = m_TestToolConfigurationXML.SelectSingleNode("TestToolConfiguration/SupportedTransferSyntaxesReceiver/TransferSyntax[" + iSyntaxes.ToString() + "]").InnerText()
                        m_supportedTransferSyntaxesReceiver.Add(transferSyntax)
                    Next
                Else
                    Throw New System.Exception("There were no supported transfersyntaxes found for the receiver in the TestToolConfiguration.xml file.")
                End If

            Catch ex As System.Exception
                Logger.GetInstance().LogMessage(ex.Message)
                Throw New System.Exception("There were no supported transfersyntaxes found in the TestToolConfiguration.xml file.")
            End Try


            Try
                If XMLAttributeExists("TestToolConfiguration/ReportDebugMessages") Then
                    Dim reportDebug As String
                    reportDebug = m_TestToolConfigurationXML.SelectSingleNode("TestToolConfiguration/ReportDebugMessages").InnerText
                    If reportDebug = "Yes" Then
                        m_reportDebugMessages = True
                    Else
                        m_reportDebugMessages = False
                    End If
                Else
                    'If there is no setting in the config file then Debug messages will not be shown
                    m_reportDebugMessages = False
                End If
            Catch ex As System.Exception
                m_reportDebugMessages = True
            End Try

            Logger.GetInstance.LogDebugMessages = m_reportDebugMessages

        Catch ex As System.Exception
            Throw New System.Exception("An error occured while initialising the test tool configuration.")
        End Try
    End Sub

    'Checks if an XML attribute exists on given XPath location
    Private Function XMLAttributeExists(ByVal XPathToXMLAttribute As String) As Boolean
        Dim XmlAttribute As String
        Dim attributeIsValid As Boolean = False

        Try
            XmlAttribute = m_TestToolConfigurationXML.SelectSingleNode(XPathToXMLAttribute).InnerText
            attributeIsValid = True
        Catch ex As System.Exception
            ''debug.writeLine("Could not locate \"" + XPathToXMLAttribute " \ " in the XML system.io.File. Is this dataset needed for this scenario?")
        End Try

        Return attributeIsValid
    End Function

    ReadOnly Property ReportDebugMessages() As Boolean
        Get
            Return m_reportDebugMessages
        End Get
    End Property

    Property SupportedTransferSyntaxesSender() As System.Collections.Specialized.StringCollection
        Get
            Return m_supportedTransferSyntaxesSender
        End Get
        Set(value As System.Collections.Specialized.StringCollection)
            m_supportedTransferSyntaxesSender = value
        End Set
    End Property

    Property SupportedTransferSyntaxesReceiver() As System.Collections.Specialized.StringCollection
        Get
            Return m_supportedTransferSyntaxesReceiver
        End Get
        Set(value As System.Collections.Specialized.StringCollection)
            m_supportedTransferSyntaxesReceiver = value
        End Set
    End Property

    Public Sub SetSession(ByVal session As Dvtk.Sessions.ScriptSession)
        m_session = session
    End Sub

    Public Function GetSession() As Dvtk.Sessions.ScriptSession
        Return m_session
    End Function

    Public Sub SetThreadManager(ByVal threatManager As DvtkHighLevelInterface.Common.Threads.ThreadManager)
        m_threadManager = threatManager
    End Sub

    Public Function GetThreadManager() As DvtkHighLevelInterface.Common.Threads.ThreadManager
        Return m_threadManager
    End Function

    Public Function GetMainThread() As DvtkHighLevelInterface.Dicom.Threads.DicomThread
        Return m_mainThread
    End Function

    Public Sub SetMainThread(ByVal mainThread As DvtkHighLevelInterface.Dicom.Threads.DicomThread)
        m_mainThread = mainThread
    End Sub

    Public Function GetScriptPath() As String
        Return m_scriptPath
    End Function

    'Static method for creating one single instance
    Public Shared Function GetInstance() As TestToolConfiguration
        '		return Nothing
        ' initialize if not already done
        If m_instance Is Nothing Then
            m_instance = New TestToolConfiguration()
        End If
        ' return the initialized instance of the ReferenceDataSet Class
        Return m_instance
    End Function 'Instance

    Public Function GetDefinitionFileName(ByVal iodType As IODType) As String

        Select Case iodType
            Case iodType.CTImage
                Return "CT Image Storage.def"
            Case iodType.RTDose
                Return "RT Dose Storage.def"
            Case iodType.RTPlanDosimetric
                Return "RT Plan Storage.def"
            Case iodType.RTPlanGeometric
                Return "RT Plan Storage.def"
            Case iodType.RTStructureSet
                Return "RT Structure Set Storage.def"
        End Select

    End Function

End Class