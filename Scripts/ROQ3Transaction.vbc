#If Not DVT_INTERPRETS_SCRIPT Then
Imports System.Collections.Generic
#End If

Class ROQ3Transaction
    Inherits Transaction

    'Constructor
    Public Sub New(ByVal SUTActor As Actor, ByVal storeActor As Actor)

        MyBase.New("RO-Q3", "Work Item Objects Retrieval For Difference", IODType.StudyRootQueryRetrieveMOVE, True)
        m_sutActorId = SUTActor.Id 'for QAPV: QCR
        m_storeActorId = storeActor.Id 'for QAPV: QCP
    End Sub

    Private m_sutActorId As String
    Private m_storeActorId As String

    Protected Overrides Function GetTransactionReferenceDataMessages() As System.Collections.ArrayList
        Dim datasetMessages As ArrayList = New ArrayList()
        Dim referenceData As ReferenceDataSet = ReferenceDataSet.GetInstance()

        Dim messages As DicomMessageCollection = ReferenceDataSet.createCMoveRqStatic(DataSetHandler.UPSCacheXMLFileName, m_sutActorId, m_storeActorId, "N-CREATE-REQ")
        If messages.Count = 0 Then
            'NO messages found in the N-CREATE repsonses to retrieve from the SCP
            Dim log As String = "The request of the first scenario should have at least a reference to the RT-Plan file (it could be that the AeTitle in the N-CREATE-REQ is not the same as the QCR ae title in the configuration file."
            Logger.GetInstance().LogErrorMessage(log)
            Return Nothing
        Else
            'add the structure set message to the arraylist
            For Each message As DicomMessage In messages
                datasetMessages.Add(message)
            Next
        End If
        'return the array with dataset(s)
        Return datasetMessages
    End Function

    Public Function GetCommonTransactionRulesForRequest() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        '(0x00080052)  Query/Retrieve Level
        m_rules.Add(New ValueRule(Tags.QueryRetrieveLevel, "IMAGE", IODType.StudyRootQueryRetrieveMOVE, ErrorSeverity.RuleError))
        m_rules.Add(New RequestedCMoveSopInstanceUIDsRule(DataSetHandler.LoadDatasetFromFile(DataSetHandler.UPSCacheXMLFileName, "N-CREATE-REQ"), IODType.StudyRootQueryRetrieveMOVE, ErrorSeverity.RuleError))
        ' C-Move-Req bevat geen SOPCLASSUID alleen SopInstanceUID
        'm_rules.Add(New RequestedCMoveSopClassUIDNotRTBDIRule(IODType.StudyRootQueryRetrieveMOVE, ErrorSeverity.RuleError))
        m_rules.Add(New IsRequiredRule(Tags.AffectedSOPClassUID, IODType.StudyRootQueryRetrieveMOVE, ErrorSeverity.RuleError))
        m_rules.Add(New ValueRule(Tags.AffectedSOPClassUID, SOPclass.StudyRootQueryRetrieveMOVESOPClassUID, IODType.StudyRootQueryRetrieveMOVE, ErrorSeverity.RuleError))
        Return m_rules

    End Function

    Public Function GetTransactionRulesForC_StoreRequest() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)
        'Atleast one RTPlan should be received. Rule is performed on the messagecollection, not on every C-Store operation, so only once.
        m_rules.Add(New IODReceivedRule(IODType.RTPlanDosimetric, ErrorSeverity.RuleError))
        m_rules.Add(New IsRequiredRule(Tags.AffectedSOPClassUID, IODType.CStoreRequest, ErrorSeverity.RuleError))

        Return m_rules

    End Function

    Public Function GetTransactionRulesForRequest() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        Return m_rules

    End Function

    Public Function GetCommonTransactionRulesForResponse() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        Return m_rules

    End Function

    Public Function GetTransactionRulesForResponse() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        Return m_rules

    End Function

    Public Function GetReceivedObjectRules() As System.Collections.Generic.IEnumerable(Of Rule)
        Dim m_rules As List(Of Rule) = New List(Of Rule)

        ' Apply validation rules for the received objects
        m_rules.Add(New IsRequiredRule(Tags.ReferencedRTPlanSequence, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))
        m_rules.Add(New SequenceLoopRule(Tags.ReferencedRTPlanSequence, New ValueRule(Tags.ReferencedRtPlanSequenceRSSRSSReferencedSopClassUid, SOPclass.RTPlanDosimetricSOPClassUID, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))
        m_rules.Add(New SequenceLoopRule(Tags.ReferencedRTPlanSequence, New HasValueRule(Tags.ReferencedRtPlanSequenceRSSRSSReferencedSopInstanceUid, IODType.RTPlanDosimetric, ErrorSeverity.RuleError)))

        m_rules.Add(New IsRequiredRule(Tags.RTPlanRelationship, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))

        'RT plan relationships
        Dim values(5) As String
        values(0) = "PRIOR"
        values(1) = "ALTERNATIVE"
        values(2) = "PREDECESSOR"
        values(3) = "QAPV_EQUIVALENT"
        values(4) = "VERIFIED_PLAN"
        values(5) = "CONCURRENT"

        m_rules.Add(New ValueListRule(Tags.RTPlanRelationship, values, IODType.RTPlanDosimetric, ErrorSeverity.RuleError))

        Return m_rules

    End Function

End Class
