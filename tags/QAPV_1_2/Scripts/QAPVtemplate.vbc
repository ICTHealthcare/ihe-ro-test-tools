#If Not DVT_INTERPRETS_SCRIPT Then
Imports System.Collections.Generic
Imports System.Text
Imports System.Xml

Imports VR = DvtkData.Dimse.VR
Imports DvtkHighLevelInterface.Dicom.Other
#End If

Public Class QAPVtemplate

    Private m_RootContentItem As SpecificationContentItemWithValueTypeContainer = Nothing
    Dim AssessedPlanSOPInstanceUID As SpecificationContentItemWithValueTypeUIDRef

    Public Property RootContentItem() As SpecificationContentItemWithValueTypeContainer
        Get
            Return m_RootContentItem
        End Get
        Set(ByVal value As SpecificationContentItemWithValueTypeContainer)
            m_RootContentItem = value
        End Set
    End Property

    Public Sub New(isDifferenceCheck As Boolean)

        RootContentItem = New SpecificationContentItemWithValueTypeContainer(Nothing)
        RootContentItem.RequirementType = RequirementTypeEnum.M
        RootContentItem.ValueMultiplicity.Min = "1"
        RootContentItem.ValueMultiplicity.Max = "1"
        RootContentItem.ConceptName = ConceptNames.rootContentItem


        'critical Issues Found
        Dim CriticalIssuesFound As SpecificationContentItemWithValueTypeCode = New SpecificationContentItemWithValueTypeCode(RootContentItem)
        CriticalIssuesFound.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        CriticalIssuesFound.RequirementType = RequirementTypeEnum.M
        CriticalIssuesFound.ValueMultiplicity.Min = "1"
        CriticalIssuesFound.ValueMultiplicity.Max = "1"
        CriticalIssuesFound.ConceptName = ConceptNames.CriticalIssuesFound

        CriticalIssuesFound.ValueSetConstraint.Add(ConceptNames.CriticalIssuesFoundOptionNo)
        CriticalIssuesFound.ValueSetConstraint.Add(ConceptNames.CriticalIssuesFoundOptionYes)

        'DTID 1021

        'Device Role in Procedure (sequence)
        Dim DeviceRoleInProcedure As SpecificationContentItemWithValueTypeCode = New SpecificationContentItemWithValueTypeCode(RootContentItem)
        DeviceRoleInProcedure.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        DeviceRoleInProcedure.RequirementType = RequirementTypeEnum.M
        DeviceRoleInProcedure.ValueMultiplicity.Min = "1"
        DeviceRoleInProcedure.ValueMultiplicity.Max = "1"
        DeviceRoleInProcedure.ConceptName = ConceptNames.DeviceRoleInProcedure

        'Device Name
        Dim DeviceName As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(DeviceRoleInProcedure)
        DeviceName.RelationshipWithParent = RelationshipWithParentEnum.HAS_PROPERTIES
        DeviceName.RequirementType = RequirementTypeEnum.U
        DeviceName.ValueMultiplicity.Min = "1"
        DeviceName.ValueMultiplicity.Max = "1"
        DeviceName.ConceptName = ConceptNames.DeviceName

        'Device Manufacturer
        Dim DeviceManufacturer As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(DeviceRoleInProcedure)
        DeviceManufacturer.RelationshipWithParent = RelationshipWithParentEnum.HAS_PROPERTIES
        DeviceManufacturer.RequirementType = RequirementTypeEnum.M
        DeviceManufacturer.ValueMultiplicity.Min = "1"
        DeviceManufacturer.ValueMultiplicity.Max = "1"
        DeviceManufacturer.ConceptName = ConceptNames.DeviceManufacturer

        'Device Model Name
        Dim DeviceModelName As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(DeviceRoleInProcedure)
        DeviceModelName.RelationshipWithParent = RelationshipWithParentEnum.HAS_PROPERTIES
        DeviceModelName.RequirementType = RequirementTypeEnum.M
        DeviceModelName.ValueMultiplicity.Min = "1"
        DeviceModelName.ValueMultiplicity.Max = "1"
        DeviceModelName.ConceptName = ConceptNames.DeviceModelName

        'Device Serial Number
        Dim DeviceSerialNumber As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(DeviceRoleInProcedure)
        DeviceSerialNumber.RelationshipWithParent = RelationshipWithParentEnum.HAS_PROPERTIES
        DeviceSerialNumber.RequirementType = RequirementTypeEnum.M
        DeviceSerialNumber.ValueMultiplicity.Min = "1"
        DeviceSerialNumber.ValueMultiplicity.Max = "1"
        DeviceSerialNumber.ConceptName = ConceptNames.DeviceSerialNumber

        'Device Observer UID
        Dim DeviceObserverUID As SpecificationContentItemWithValueTypeUIDRef = New SpecificationContentItemWithValueTypeUIDRef(DeviceRoleInProcedure)
        DeviceObserverUID.RelationshipWithParent = RelationshipWithParentEnum.HAS_PROPERTIES
        DeviceObserverUID.RequirementType = RequirementTypeEnum.M
        DeviceObserverUID.ValueMultiplicity.Min = "1"
        DeviceObserverUID.ValueMultiplicity.Max = "1"
        DeviceObserverUID.ConceptName = ConceptNames.DeviceObserverUID


        'Datetime When The Check Was Completed
        Dim DatetimeWhenTheCheckWasCompleted As SpecificationContentItemWithValueTypeDateTime = New SpecificationContentItemWithValueTypeDateTime(RootContentItem)
        DatetimeWhenTheCheckWasCompleted.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        DatetimeWhenTheCheckWasCompleted.RequirementType = RequirementTypeEnum.M
        DatetimeWhenTheCheckWasCompleted.ValueMultiplicity.Min = "1"
        DatetimeWhenTheCheckWasCompleted.ValueMultiplicity.Max = "1"
        DatetimeWhenTheCheckWasCompleted.ConceptName = ConceptNames.DatetimeWhenTheCheckWasCompleted


        'Summary Of Result
        Dim SummaryOfResult As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(RootContentItem)
        SummaryOfResult.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        SummaryOfResult.RequirementType = RequirementTypeEnum.M
        SummaryOfResult.ValueMultiplicity.Min = "1"
        SummaryOfResult.ValueMultiplicity.Max = "1"
        SummaryOfResult.ConceptName = ConceptNames.SummaryOfResult

        'Plan SOP Instance UID
        Dim CandidateSOPClassUID As SpecificationContentItemWithValueTypeUIDRef = New SpecificationContentItemWithValueTypeUIDRef(RootContentItem)
        CandidateSOPClassUID.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        CandidateSOPClassUID.RequirementType = RequirementTypeEnum.M
        CandidateSOPClassUID.ValueMultiplicity.Min = "1"
        CandidateSOPClassUID.ValueMultiplicity.Max = "1"
        CandidateSOPClassUID.ConceptName = ConceptNames.CandidateSOPClassUID
        CandidateSOPClassUID.ValueSetConstraint = "1.2.840.10008.5.1.4.1.1.481.5"

        'Plan SOP Instance UID
        Dim PlanSOPInstanceUID As SpecificationContentItemWithValueTypeUIDRef = New SpecificationContentItemWithValueTypeUIDRef(RootContentItem)
        PlanSOPInstanceUID.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        PlanSOPInstanceUID.RequirementType = RequirementTypeEnum.M
        PlanSOPInstanceUID.ValueMultiplicity.Min = "1"
        PlanSOPInstanceUID.ValueMultiplicity.Max = "1"
        PlanSOPInstanceUID.ConceptName = ConceptNames.CandidateSOPInstanceUID


        If (isDifferenceCheck) Then
            'Assessed Plan SOP Instance UID
            AssessedPlanSOPInstanceUID = New SpecificationContentItemWithValueTypeUIDRef(RootContentItem)
            AssessedPlanSOPInstanceUID.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
            AssessedPlanSOPInstanceUID.RequirementType = RequirementTypeEnum.M
            AssessedPlanSOPInstanceUID.ValueMultiplicity.Min = "1"
            AssessedPlanSOPInstanceUID.ValueMultiplicity.Max = "1"
            AssessedPlanSOPInstanceUID.ConceptName = ConceptNames.AssessedSOPInstanceUID
        Else
            'Assessed Plan SOP Instance UID
            AssessedPlanSOPInstanceUID = New SpecificationContentItemWithValueTypeUIDRef(RootContentItem)
            AssessedPlanSOPInstanceUID.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
            AssessedPlanSOPInstanceUID.RequirementType = RequirementTypeEnum.U
            AssessedPlanSOPInstanceUID.ValueMultiplicity.Min = "0"
            AssessedPlanSOPInstanceUID.ValueMultiplicity.Max = "1"
            AssessedPlanSOPInstanceUID.ConceptName = ConceptNames.AssessedSOPInstanceUID
        End If



        'Number Of Check Results
        Dim NumberOfCheckResults As SpecificationContentItemWithValueTypeNum = New SpecificationContentItemWithValueTypeNum(RootContentItem)
        NumberOfCheckResults.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        NumberOfCheckResults.RequirementType = RequirementTypeEnum.MC
        NumberOfCheckResults.ValueMultiplicity.Min = "0" 'Required if critical issues found is YES
        NumberOfCheckResults.ValueMultiplicity.Max = "1"
        NumberOfCheckResults.ConceptName = ConceptNames.NumberOfCheckResults
        NumberOfCheckResults.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))

        'TID(2310) Radiotherapy Treatment Plan Check Request Result Detail

        'RT Plan Check Request Result Detail
        Dim RTPlanCheckRequestResultDetail As SpecificationContentItemWithValueTypeContainer = New SpecificationContentItemWithValueTypeContainer(RootContentItem)
        RTPlanCheckRequestResultDetail.RequirementType = RequirementTypeEnum.MC
        RTPlanCheckRequestResultDetail.ValueMultiplicity.Min = "0"
        RTPlanCheckRequestResultDetail.ValueMultiplicity.Max = "n"
        RTPlanCheckRequestResultDetail.ValueMultiplicity.CountOfContentItemCount = NumberOfCheckResults
        RTPlanCheckRequestResultDetail.ConceptName = ConceptNames.RTCheckRequestResultDetail
        RTPlanCheckRequestResultDetail.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))


        'critical Issues Found
        Dim CriticalIssuesFoundTID2310 As SpecificationContentItemWithValueTypeCode = New SpecificationContentItemWithValueTypeCode(RTPlanCheckRequestResultDetail)
        CriticalIssuesFoundTID2310.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        CriticalIssuesFoundTID2310.RequirementType = RequirementTypeEnum.MC
        CriticalIssuesFoundTID2310.ValueMultiplicity.Min = "0"
        CriticalIssuesFoundTID2310.ValueMultiplicity.Max = "n"
        CriticalIssuesFoundTID2310.ValueMultiplicity.CountOfContentItemCount = RTPlanCheckRequestResultDetail
        CriticalIssuesFoundTID2310.ConceptName = ConceptNames.CriticalIssuesFoundTID2310
        CriticalIssuesFoundTID2310.ValueSetConstraint.Add(ConceptNames.CriticalIssuesFoundOptionYes)
        CriticalIssuesFoundTID2310.ValueSetConstraint.Add(ConceptNames.CriticalIssuesFoundOptionNo)
        CriticalIssuesFoundTID2310.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))

        'Informational Issue Found
        Dim InformationalIssueFound As SpecificationContentItemWithValueTypeCode = New SpecificationContentItemWithValueTypeCode(RTPlanCheckRequestResultDetail)
        InformationalIssueFound.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        InformationalIssueFound.RequirementType = RequirementTypeEnum.MC
        InformationalIssueFound.ValueMultiplicity.Min = "0"
        InformationalIssueFound.ValueMultiplicity.Max = "n"
        InformationalIssueFound.ValueMultiplicity.CountOfContentItemCount = RTPlanCheckRequestResultDetail
        InformationalIssueFound.ConceptName = ConceptNames.InformationalIssueFound
        InformationalIssueFound.ValueSetConstraint.Add(ConceptNames.CriticalIssuesFoundOptionYes)
        InformationalIssueFound.ValueSetConstraint.Add(ConceptNames.CriticalIssuesFoundOptionNo)
        InformationalIssueFound.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))

        'Assessment Code
        Dim AssessmentCode As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(RTPlanCheckRequestResultDetail)
        AssessmentCode.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        AssessmentCode.RequirementType = RequirementTypeEnum.MC
        AssessmentCode.ValueMultiplicity.Min = "0"
        AssessmentCode.ValueMultiplicity.Max = "n"
        AssessmentCode.ValueMultiplicity.CountOfContentItemCount = RTPlanCheckRequestResultDetail
        AssessmentCode.ConceptName = ConceptNames.AssessmentCode
        AssessmentCode.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))

        'AssessmentReportingType
        Dim AssessmentReportingType As SpecificationContentItemWithValueTypeCode = New SpecificationContentItemWithValueTypeCode(RTPlanCheckRequestResultDetail)
        AssessmentReportingType.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        AssessmentReportingType.RequirementType = RequirementTypeEnum.MC
        AssessmentReportingType.ValueMultiplicity.Min = "0"
        AssessmentReportingType.ValueMultiplicity.Max = "n"
        AssessmentReportingType.ValueMultiplicity.CountOfContentItemCount = RTPlanCheckRequestResultDetail
        AssessmentReportingType.ConceptName = ConceptNames.AssessmentReportingType
        AssessmentReportingType.ValueSetConstraint.Add(ConceptNames.UpperBound)
        AssessmentReportingType.ValueSetConstraint.Add(ConceptNames.LowerBound)
        AssessmentReportingType.ValueSetConstraint.Add(ConceptNames.Range)
        AssessmentReportingType.ValueSetConstraint.Add(ConceptNames.AttributeInconsistency)
        AssessmentReportingType.ValueSetConstraint.Add(ConceptNames.Equality)
        AssessmentReportingType.ValueSetConstraint.Add(ConceptNames.NonSpecific)
        AssessmentReportingType.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))

        'Specific Numeric Assessment Sequence
        Dim SpecificNumericAssessmentSequence As SpecificationContentItemWithValueTypeContainer = New SpecificationContentItemWithValueTypeContainer(RTPlanCheckRequestResultDetail)
        SpecificNumericAssessmentSequence.RequirementType = RequirementTypeEnum.MC
        SpecificNumericAssessmentSequence.ValueMultiplicity.Min = "0"
        SpecificNumericAssessmentSequence.ValueMultiplicity.Max = "n"
        SpecificNumericAssessmentSequence.ConceptName = ConceptNames.SpecificAssessmentSequence
        Dim listOfPossibleValues As New List(Of CodedConcept)

        listOfPossibleValues.Add(ConceptNames.UpperBound)
        listOfPossibleValues.Add(ConceptNames.LowerBound)
        listOfPossibleValues.Add(ConceptNames.Range)
        listOfPossibleValues.Add(ConceptNames.NumericEquality)
        SpecificNumericAssessmentSequence.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))
        SpecificNumericAssessmentSequence.Conditions.Add(New AssessmentReportingTypeCondition(AssessmentReportingType, listOfPossibleValues))

        'Upper Bound Value
        Dim UpperBoundValue As SpecificationContentItemWithValueTypeNum = New SpecificationContentItemWithValueTypeNum(SpecificNumericAssessmentSequence)
        UpperBoundValue.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        UpperBoundValue.RequirementType = RequirementTypeEnum.MC
        UpperBoundValue.ValueMultiplicity.Min = "0"
        UpperBoundValue.ValueMultiplicity.Max = "n"
        UpperBoundValue.ConceptName = ConceptNames.UpperBoundValue

        listOfPossibleValues = New List(Of CodedConcept)
        listOfPossibleValues.Add(ConceptNames.UpperBound)
        listOfPossibleValues.Add(ConceptNames.Range)
        listOfPossibleValues.Add(ConceptNames.NumericEquality)
        UpperBoundValue.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))
        UpperBoundValue.Conditions.Add(New AssessmentReportingTypeCondition(AssessmentReportingType, listOfPossibleValues))

        'Lower Bound Value
        Dim LowerBoundValue As SpecificationContentItemWithValueTypeNum = New SpecificationContentItemWithValueTypeNum(SpecificNumericAssessmentSequence)
        LowerBoundValue.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        LowerBoundValue.RequirementType = RequirementTypeEnum.MC
        LowerBoundValue.ValueMultiplicity.Min = "0"
        LowerBoundValue.ValueMultiplicity.Max = "n"
        LowerBoundValue.ConceptName = ConceptNames.LowerBoundValue

        listOfPossibleValues = New List(Of CodedConcept)
        listOfPossibleValues.Add(ConceptNames.LowerBound)
        listOfPossibleValues.Add(ConceptNames.Range)
        LowerBoundValue.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))
        LowerBoundValue.Conditions.Add(New AssessmentReportingTypeCondition(AssessmentReportingType, listOfPossibleValues))


        listOfPossibleValues.Add(ConceptNames.UpperBound)
        listOfPossibleValues.Add(ConceptNames.NumericEquality)

        'Supplied Attribute Name
        Dim NumericSuppliedAttributeName As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(SpecificNumericAssessmentSequence)
        NumericSuppliedAttributeName.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        NumericSuppliedAttributeName.RequirementType = RequirementTypeEnum.MC
        NumericSuppliedAttributeName.ValueMultiplicity.Min = "0"
        NumericSuppliedAttributeName.ValueMultiplicity.Max = "n"
        NumericSuppliedAttributeName.ValueMultiplicity.CountOfContentItemCount = SpecificNumericAssessmentSequence
        NumericSuppliedAttributeName.ConceptName = ConceptNames.SuppliedAttributeName
        NumericSuppliedAttributeName.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))
        NumericSuppliedAttributeName.Conditions.Add(New AssessmentReportingTypeCondition(AssessmentReportingType, listOfPossibleValues))

        'Supplied Attribute Tag
        Dim NumericSuppliedAttributeTag As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(SpecificNumericAssessmentSequence)
        NumericSuppliedAttributeTag.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        NumericSuppliedAttributeTag.RequirementType = RequirementTypeEnum.MC
        NumericSuppliedAttributeTag.ValueMultiplicity.Min = "0"
        NumericSuppliedAttributeTag.ValueMultiplicity.Max = "n"
        NumericSuppliedAttributeTag.ValueMultiplicity.CountOfContentItemCount = SpecificNumericAssessmentSequence
        NumericSuppliedAttributeTag.ConceptName = ConceptNames.SuppliedAttributeTag
        NumericSuppliedAttributeTag.ValueSetConstraintAsRegularExpression = "^[(]?[A-Za-z0-9]{4},[A-Za-z0-9]{4}[)]?$"
        NumericSuppliedAttributeTag.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))
        NumericSuppliedAttributeTag.Conditions.Add(New AssessmentReportingTypeCondition(AssessmentReportingType, listOfPossibleValues))

        'Supplied Attribute Value
        Dim NumericSuppliedAttributeValue As SpecificationContentItemWithValueTypeNum = New SpecificationContentItemWithValueTypeNum(SpecificNumericAssessmentSequence)
        NumericSuppliedAttributeValue.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        NumericSuppliedAttributeValue.RequirementType = RequirementTypeEnum.MC
        NumericSuppliedAttributeValue.ValueMultiplicity.Min = "0"
        NumericSuppliedAttributeValue.ValueMultiplicity.Max = "n"
        NumericSuppliedAttributeValue.ValueMultiplicity.CountOfContentItemCount = SpecificNumericAssessmentSequence
        NumericSuppliedAttributeValue.ConceptName = ConceptNames.SuppliedAttributeValue
        NumericSuppliedAttributeValue.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))
        NumericSuppliedAttributeValue.Conditions.Add(New AssessmentReportingTypeCondition(AssessmentReportingType, listOfPossibleValues))

        'Specific Assessment Sequence
        Dim SpecificAssessmentSequence As SpecificationContentItemWithValueTypeContainer = New SpecificationContentItemWithValueTypeContainer(RTPlanCheckRequestResultDetail)
        SpecificAssessmentSequence.RequirementType = RequirementTypeEnum.MC
        SpecificAssessmentSequence.ValueMultiplicity.Min = "0"
        SpecificAssessmentSequence.ValueMultiplicity.Max = "n"
        SpecificAssessmentSequence.ConceptName = ConceptNames.GeneralAssessmentSequence
        listOfPossibleValues = New List(Of CodedConcept)

        listOfPossibleValues.Add(ConceptNames.AttributeInconsistency)
        listOfPossibleValues.Add(ConceptNames.Equality)
        SpecificAssessmentSequence.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))
        SpecificAssessmentSequence.Conditions.Add(New AssessmentReportingTypeCondition(AssessmentReportingType, listOfPossibleValues))

        'Expected Value
        Dim ExpectedValue As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(SpecificAssessmentSequence)
        ExpectedValue.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        ExpectedValue.RequirementType = RequirementTypeEnum.MC
        ExpectedValue.ValueMultiplicity.Min = "0"
        ExpectedValue.ValueMultiplicity.Max = "n"
        ExpectedValue.ValueMultiplicity.CountOfContentItemCount = SpecificAssessmentSequence
        ExpectedValue.ConceptName = ConceptNames.ExpectedValue
        ExpectedValue.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))
        ExpectedValue.Conditions.Add(New AssessmentReportingTypeCondition(AssessmentReportingType, listOfPossibleValues))


        'Supplied Attribute Name
        Dim SuppliedAttributeName As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(SpecificAssessmentSequence)
        SuppliedAttributeName.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        SuppliedAttributeName.RequirementType = RequirementTypeEnum.MC
        SuppliedAttributeName.ValueMultiplicity.Min = "0"
        SuppliedAttributeName.ValueMultiplicity.Max = "n"
        SuppliedAttributeName.ValueMultiplicity.CountOfContentItemCount = SpecificAssessmentSequence
        SuppliedAttributeName.ConceptName = ConceptNames.SuppliedAttributeName
        SuppliedAttributeName.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))
        SuppliedAttributeName.Conditions.Add(New AssessmentReportingTypeCondition(AssessmentReportingType, listOfPossibleValues))

        'Supplied Attribute Tag
        Dim SuppliedAttributeTag As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(SpecificAssessmentSequence)
        SuppliedAttributeTag.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        SuppliedAttributeTag.RequirementType = RequirementTypeEnum.MC
        SuppliedAttributeTag.ValueMultiplicity.Min = "0"
        SuppliedAttributeTag.ValueMultiplicity.Max = "n"
        SuppliedAttributeTag.ValueMultiplicity.CountOfContentItemCount = SpecificAssessmentSequence
        SuppliedAttributeTag.ConceptName = ConceptNames.SuppliedAttributeTag
        SuppliedAttributeTag.ValueSetConstraintAsRegularExpression = "^[(]?[A-Za-z0-9]{4},[A-Za-z0-9]{4}[)]?$"
        SuppliedAttributeTag.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))
        SuppliedAttributeTag.Conditions.Add(New AssessmentReportingTypeCondition(AssessmentReportingType, listOfPossibleValues))

        'Supplied Attribute Value
        Dim SuppliedAttributeValue As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(SpecificAssessmentSequence)
        SuppliedAttributeValue.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        SuppliedAttributeValue.RequirementType = RequirementTypeEnum.MC
        SuppliedAttributeValue.ValueMultiplicity.Min = "0"
        SuppliedAttributeValue.ValueMultiplicity.Max = "n"
        SuppliedAttributeValue.ValueMultiplicity.CountOfContentItemCount = SpecificAssessmentSequence
        SuppliedAttributeValue.ConceptName = ConceptNames.SuppliedAttributeValue
        SuppliedAttributeValue.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))
        SuppliedAttributeValue.Conditions.Add(New AssessmentReportingTypeCondition(AssessmentReportingType, listOfPossibleValues))

        'General Assessment Sequence
        Dim GeneralAssessmentSequence As SpecificationContentItemWithValueTypeContainer = New SpecificationContentItemWithValueTypeContainer(SpecificAssessmentSequence)
        GeneralAssessmentSequence.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        GeneralAssessmentSequence.RequirementType = RequirementTypeEnum.MC
        GeneralAssessmentSequence.ValueMultiplicity.Min = "0"
        GeneralAssessmentSequence.ValueMultiplicity.Max = "n"
        GeneralAssessmentSequence.ConceptName = ConceptNames.GeneralAssessmentSequence

        listOfPossibleValues = New List(Of CodedConcept)
        listOfPossibleValues.Add(ConceptNames.NonSpecific)
        GeneralAssessmentSequence.Conditions.Add(New AssessmentReportingTypeCondition(AssessmentReportingType, listOfPossibleValues))
        GeneralAssessmentSequence.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))

        'Check Description
        Dim CheckDescription As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(GeneralAssessmentSequence)
        CheckDescription.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        CheckDescription.RequirementType = RequirementTypeEnum.MC
        CheckDescription.ValueMultiplicity.Min = "0"
        CheckDescription.ValueMultiplicity.Max = "n"
        CheckDescription.ValueMultiplicity.CountOfContentItemCount = GeneralAssessmentSequence
        CheckDescription.ConceptName = ConceptNames.CheckDescription
        CheckDescription.Conditions.Add(New CheckResultsCondition(CriticalIssuesFound))
        CheckDescription.Conditions.Add(New AssessmentReportingTypeCondition(AssessmentReportingType, listOfPossibleValues))

        ''Performed Procedure Step SOP Instance UID
        'Dim PerformedProcedureStepSOPInstanceUID As SpecificationContentItemWithValueTypeUIDRef = New SpecificationContentItemWithValueTypeUIDRef(RootContentItem)
        'PerformedProcedureStepSOPInstanceUID.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        'PerformedProcedureStepSOPInstanceUID.RequirementType = RequirementTypeEnum.M
        'PerformedProcedureStepSOPInstanceUID.ValueMultiplicity.Min = "1"
        'PerformedProcedureStepSOPInstanceUID.ValueMultiplicity.Max = "1"
        'PerformedProcedureStepSOPInstanceUID.ConceptName = ConceptNames.PerformedProcedureStepSOPInstanceUID

        'Requester AE Title
        Dim RequesterAETitle As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(RootContentItem)
        RequesterAETitle.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        RequesterAETitle.RequirementType = RequirementTypeEnum.M
        RequesterAETitle.ValueMultiplicity.Min = "1"
        RequesterAETitle.ValueMultiplicity.Max = "1"
        RequesterAETitle.ConceptName = ConceptNames.RequesterAETitle

        'Check Performer Result Key
        Dim CheckPerformerResultKey As SpecificationContentItemWithValueTypeText = New SpecificationContentItemWithValueTypeText(RootContentItem)
        CheckPerformerResultKey.RelationshipWithParent = RelationshipWithParentEnum.CONTAINS
        CheckPerformerResultKey.RequirementType = RequirementTypeEnum.U
        CheckPerformerResultKey.ValueMultiplicity.Min = "1"
        CheckPerformerResultKey.ValueMultiplicity.Max = "1"
        CheckPerformerResultKey.ConceptName = ConceptNames.CheckPerformerResultKey

        'einde


    End Sub

    Public Function getTemplateContentItemRequiredForDifferenceCheck()
        Return AssessedPlanSOPInstanceUID
    End Function

End Class

Public Class CheckResultsCondition
    Implements Condition

    Private m_referencedContentItem As SpecificationContentItem

    Public Sub New(ByVal referencedContentItem As SpecificationContentItem)
        m_referencedContentItem = referencedContentItem
    End Sub

    Public Function evaluate(ByVal mapping As Mapping) As Boolean Implements Condition.evaluate

        Dim listOfDatasetContentItems As List(Of DataSetContentItem) = mapping.GetDatasetContentItems(m_referencedContentItem)

        If (listOfDatasetContentItems.Count = 0) Then
            'log item niet aanwezig in dataset
            Return False
        ElseIf (listOfDatasetContentItems.Count > 1) Then
            'log item te vaak aanwezig in dataset
            Return False
        Else

            Dim referencedDatasetContentItem As DataSetContentItem = listOfDatasetContentItems.Item(0)
            If (referencedDatasetContentItem.ValueType = ValueTypeEnum.CODE.ToString()) Then
                Dim referencedDatasetContentItemCodeValueType = CType(referencedDatasetContentItem, DataSetContentItemWithValueTypeCode)

                If (referencedDatasetContentItemCodeValueType.ConceptCode.CodeValue = "R-0038D" And referencedDatasetContentItemCodeValueType.ConceptCode.CodingSchemeDesignator = "DCM") Then
                    Return True
                Else
                    Return False
                End If
            Else
                'log item heeft verkeerde valuetype
                Return False
            End If
        End If



    End Function
End Class

Public Class AssessmentReportingTypeCondition
    Implements Condition

    Private m_referencedContentItem As SpecificationContentItem
    Private m_listOfConditionalCodedConcepts As List(Of CodedConcept)


    Public Sub New(ByVal referencedContentItem As SpecificationContentItem, ByVal listOfConditionalCodedConcepts As List(Of CodedConcept))
        m_referencedContentItem = referencedContentItem
        m_listOfConditionalCodedConcepts = listOfConditionalCodedConcepts
    End Sub

    Public Function evaluate(ByVal mapping As Mapping) As Boolean Implements Condition.evaluate

        Dim listOfDatasetContentItems As List(Of DataSetContentItem) = mapping.GetDatasetContentItems(m_referencedContentItem)
        Dim conditionStatus As Boolean = False

        If (listOfDatasetContentItems.Count = 0) Then
            'log item niet aanwezig in dataset
        ElseIf (listOfDatasetContentItems.Count > 1) Then
            'log item te vaak aanwezig in dataset
        Else

            Dim referencedDatasetContentItem As DataSetContentItem = listOfDatasetContentItems.Item(0)
            If (referencedDatasetContentItem.ValueType = ValueTypeEnum.CODE.ToString()) Then
                Dim referencedDatasetContentItemCodeValueType = CType(referencedDatasetContentItem, DataSetContentItemWithValueTypeCode)

                For Each codedConcept As CodedConcept In m_listOfConditionalCodedConcepts

                    If (referencedDatasetContentItemCodeValueType.ConceptCode.CodeValue = codedConcept.CodeValue And referencedDatasetContentItemCodeValueType.ConceptCode.CodingSchemeDesignator = codedConcept.CodingSchemeDesignator) Then
                        conditionStatus = True
                    End If
                Next

            Else
                'log item heeft verkeerde valuetype
            End If
        End If

        Return conditionStatus
    End Function
End Class


